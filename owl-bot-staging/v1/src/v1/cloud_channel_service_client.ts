// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, GaxCall} from 'google-gax';
import * as path from 'path';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/cloud_channel_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './cloud_channel_service_client_config.json';
import { operationsProtos } from 'google-gax';
const version = require('../../../package.json').version;

/**
 *  CloudChannelService lets Google cloud resellers and distributors manage
 *  their customers, channel partners, entitlements, and reports.
 *
 *  Using this service:
 *  1. Resellers and distributors can manage a customer entity.
 *  2. Distributors can register an authorized reseller in their channel and
 *     provide them with delegated admin access.
 *  3. Resellers and distributors can manage customer entitlements.
 *
 *  CloudChannelService exposes the following resources:
 *  - {@link google.cloud.channel.v1.Customer|Customer}s: An entity—usually an enterprise—managed by a reseller or
 *  distributor.
 *
 *  - {@link google.cloud.channel.v1.Entitlement|Entitlement}s: An entity that provides a customer with the means to use
 *  a service. Entitlements are created or updated as a result of a successful
 *  fulfillment.
 *
 *  - {@link google.cloud.channel.v1.ChannelPartnerLink|ChannelPartnerLink}s: An entity that identifies links between
 *  distributors and their indirect resellers in a channel.
 * @class
 * @memberof v1
 */
export class CloudChannelServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  cloudChannelServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of CloudChannelServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof CloudChannelServiceClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      customerPathTemplate: new this._gaxModule.PathTemplate(
        'accounts/{account}/customers/{customer}'
      ),
      entitlementPathTemplate: new this._gaxModule.PathTemplate(
        'accounts/{account}/customers/{customer}/entitlements/{entitlement}'
      ),
      offerPathTemplate: new this._gaxModule.PathTemplate(
        'accounts/{account}/offers/{offer}'
      ),
      productPathTemplate: new this._gaxModule.PathTemplate(
        'products/{product}'
      ),
      skuPathTemplate: new this._gaxModule.PathTemplate(
        'products/{product}/skus/{sku}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listCustomers:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'customers'),
      listEntitlements:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'entitlements'),
      listTransferableSkus:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'transferableSkus'),
      listTransferableOffers:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'transferableOffers'),
      listChannelPartnerLinks:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'channelPartnerLinks'),
      listProducts:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'products'),
      listSkus:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'skus'),
      listOffers:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'offers'),
      listPurchasableSkus:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'purchasableSkus'),
      listPurchasableOffers:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'purchasableOffers'),
      listSubscribers:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'serviceAccounts')
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.

    this.operationsClient = this._gaxModule.lro({
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    }).operationsClient(opts);
    const provisionCloudIdentityResponse = protoFilesRoot.lookup(
      '.google.cloud.channel.v1.Customer') as gax.protobuf.Type;
    const provisionCloudIdentityMetadata = protoFilesRoot.lookup(
      '.google.cloud.channel.v1.OperationMetadata') as gax.protobuf.Type;
    const createEntitlementResponse = protoFilesRoot.lookup(
      '.google.cloud.channel.v1.Entitlement') as gax.protobuf.Type;
    const createEntitlementMetadata = protoFilesRoot.lookup(
      '.google.cloud.channel.v1.OperationMetadata') as gax.protobuf.Type;
    const changeParametersResponse = protoFilesRoot.lookup(
      '.google.cloud.channel.v1.Entitlement') as gax.protobuf.Type;
    const changeParametersMetadata = protoFilesRoot.lookup(
      '.google.cloud.channel.v1.OperationMetadata') as gax.protobuf.Type;
    const changeRenewalSettingsResponse = protoFilesRoot.lookup(
      '.google.cloud.channel.v1.Entitlement') as gax.protobuf.Type;
    const changeRenewalSettingsMetadata = protoFilesRoot.lookup(
      '.google.cloud.channel.v1.OperationMetadata') as gax.protobuf.Type;
    const changeOfferResponse = protoFilesRoot.lookup(
      '.google.cloud.channel.v1.Entitlement') as gax.protobuf.Type;
    const changeOfferMetadata = protoFilesRoot.lookup(
      '.google.cloud.channel.v1.OperationMetadata') as gax.protobuf.Type;
    const startPaidServiceResponse = protoFilesRoot.lookup(
      '.google.cloud.channel.v1.Entitlement') as gax.protobuf.Type;
    const startPaidServiceMetadata = protoFilesRoot.lookup(
      '.google.cloud.channel.v1.OperationMetadata') as gax.protobuf.Type;
    const suspendEntitlementResponse = protoFilesRoot.lookup(
      '.google.cloud.channel.v1.Entitlement') as gax.protobuf.Type;
    const suspendEntitlementMetadata = protoFilesRoot.lookup(
      '.google.cloud.channel.v1.OperationMetadata') as gax.protobuf.Type;
    const cancelEntitlementResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const cancelEntitlementMetadata = protoFilesRoot.lookup(
      '.google.cloud.channel.v1.OperationMetadata') as gax.protobuf.Type;
    const activateEntitlementResponse = protoFilesRoot.lookup(
      '.google.cloud.channel.v1.Entitlement') as gax.protobuf.Type;
    const activateEntitlementMetadata = protoFilesRoot.lookup(
      '.google.cloud.channel.v1.OperationMetadata') as gax.protobuf.Type;
    const transferEntitlementsResponse = protoFilesRoot.lookup(
      '.google.cloud.channel.v1.TransferEntitlementsResponse') as gax.protobuf.Type;
    const transferEntitlementsMetadata = protoFilesRoot.lookup(
      '.google.cloud.channel.v1.OperationMetadata') as gax.protobuf.Type;
    const transferEntitlementsToGoogleResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const transferEntitlementsToGoogleMetadata = protoFilesRoot.lookup(
      '.google.cloud.channel.v1.OperationMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      provisionCloudIdentity: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        provisionCloudIdentityResponse.decode.bind(provisionCloudIdentityResponse),
        provisionCloudIdentityMetadata.decode.bind(provisionCloudIdentityMetadata)),
      createEntitlement: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createEntitlementResponse.decode.bind(createEntitlementResponse),
        createEntitlementMetadata.decode.bind(createEntitlementMetadata)),
      changeParameters: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        changeParametersResponse.decode.bind(changeParametersResponse),
        changeParametersMetadata.decode.bind(changeParametersMetadata)),
      changeRenewalSettings: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        changeRenewalSettingsResponse.decode.bind(changeRenewalSettingsResponse),
        changeRenewalSettingsMetadata.decode.bind(changeRenewalSettingsMetadata)),
      changeOffer: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        changeOfferResponse.decode.bind(changeOfferResponse),
        changeOfferMetadata.decode.bind(changeOfferMetadata)),
      startPaidService: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        startPaidServiceResponse.decode.bind(startPaidServiceResponse),
        startPaidServiceMetadata.decode.bind(startPaidServiceMetadata)),
      suspendEntitlement: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        suspendEntitlementResponse.decode.bind(suspendEntitlementResponse),
        suspendEntitlementMetadata.decode.bind(suspendEntitlementMetadata)),
      cancelEntitlement: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        cancelEntitlementResponse.decode.bind(cancelEntitlementResponse),
        cancelEntitlementMetadata.decode.bind(cancelEntitlementMetadata)),
      activateEntitlement: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        activateEntitlementResponse.decode.bind(activateEntitlementResponse),
        activateEntitlementMetadata.decode.bind(activateEntitlementMetadata)),
      transferEntitlements: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        transferEntitlementsResponse.decode.bind(transferEntitlementsResponse),
        transferEntitlementsMetadata.decode.bind(transferEntitlementsMetadata)),
      transferEntitlementsToGoogle: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        transferEntitlementsToGoogleResponse.decode.bind(transferEntitlementsToGoogleResponse),
        transferEntitlementsToGoogleMetadata.decode.bind(transferEntitlementsToGoogleMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.channel.v1.CloudChannelService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.cloudChannelServiceStub) {
      return this.cloudChannelServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.channel.v1.CloudChannelService.
    this.cloudChannelServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.channel.v1.CloudChannelService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.channel.v1.CloudChannelService,
        this._opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const cloudChannelServiceStubMethods =
        ['listCustomers', 'getCustomer', 'checkCloudIdentityAccountsExist', 'createCustomer', 'updateCustomer', 'deleteCustomer', 'provisionCloudIdentity', 'listEntitlements', 'listTransferableSkus', 'listTransferableOffers', 'getEntitlement', 'createEntitlement', 'changeParameters', 'changeRenewalSettings', 'changeOffer', 'startPaidService', 'suspendEntitlement', 'cancelEntitlement', 'activateEntitlement', 'transferEntitlements', 'transferEntitlementsToGoogle', 'listChannelPartnerLinks', 'getChannelPartnerLink', 'createChannelPartnerLink', 'updateChannelPartnerLink', 'listProducts', 'listSkus', 'listOffers', 'listPurchasableSkus', 'listPurchasableOffers', 'registerSubscriber', 'unregisterSubscriber', 'listSubscribers'];
    for (const methodName of cloudChannelServiceStubMethods) {
      const callPromise = this.cloudChannelServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.cloudChannelServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'cloudchannel.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'cloudchannel.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/apps.order'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  getCustomer(
      request: protos.google.cloud.channel.v1.IGetCustomerRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.channel.v1.ICustomer,
        protos.google.cloud.channel.v1.IGetCustomerRequest|undefined, {}|undefined
      ]>;
  getCustomer(
      request: protos.google.cloud.channel.v1.IGetCustomerRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.channel.v1.ICustomer,
          protos.google.cloud.channel.v1.IGetCustomerRequest|null|undefined,
          {}|null|undefined>): void;
  getCustomer(
      request: protos.google.cloud.channel.v1.IGetCustomerRequest,
      callback: Callback<
          protos.google.cloud.channel.v1.ICustomer,
          protos.google.cloud.channel.v1.IGetCustomerRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Returns a requested {@link google.cloud.channel.v1.Customer|Customer} resource.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The reseller account making the request is different
 * from the reseller account in the API request.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 * * NOT_FOUND: The customer resource doesn't exist. Usually the result of an
 * invalid name parameter.
 *
 * Return value:
 * The {@link google.cloud.channel.v1.Customer|Customer} resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the customer to retrieve.
 *   Name uses the format: accounts/{account_id}/customers/{customer_id}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Customer]{@link google.cloud.channel.v1.Customer}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getCustomer(request);
 */
  getCustomer(
      request: protos.google.cloud.channel.v1.IGetCustomerRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.channel.v1.ICustomer,
          protos.google.cloud.channel.v1.IGetCustomerRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.channel.v1.ICustomer,
          protos.google.cloud.channel.v1.IGetCustomerRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.channel.v1.ICustomer,
        protos.google.cloud.channel.v1.IGetCustomerRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getCustomer(request, options, callback);
  }
  checkCloudIdentityAccountsExist(
      request: protos.google.cloud.channel.v1.ICheckCloudIdentityAccountsExistRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.channel.v1.ICheckCloudIdentityAccountsExistResponse,
        protos.google.cloud.channel.v1.ICheckCloudIdentityAccountsExistRequest|undefined, {}|undefined
      ]>;
  checkCloudIdentityAccountsExist(
      request: protos.google.cloud.channel.v1.ICheckCloudIdentityAccountsExistRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.channel.v1.ICheckCloudIdentityAccountsExistResponse,
          protos.google.cloud.channel.v1.ICheckCloudIdentityAccountsExistRequest|null|undefined,
          {}|null|undefined>): void;
  checkCloudIdentityAccountsExist(
      request: protos.google.cloud.channel.v1.ICheckCloudIdentityAccountsExistRequest,
      callback: Callback<
          protos.google.cloud.channel.v1.ICheckCloudIdentityAccountsExistResponse,
          protos.google.cloud.channel.v1.ICheckCloudIdentityAccountsExistRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Confirms the existence of Cloud Identity accounts based on the domain and
 * if the Cloud Identity accounts are owned by the reseller.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The reseller account making the request is different
 * from the reseller account in the API request.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 * * INVALID_VALUE: Invalid domain value in the request.
 *
 * Return value:
 * A list of {@link google.cloud.channel.v1.CloudIdentityCustomerAccount|CloudIdentityCustomerAccount} resources for the domain (may be
 * empty)
 *
 * Note: in the v1alpha1 version of the API, a NOT_FOUND error returns if
 * no {@link google.cloud.channel.v1.CloudIdentityCustomerAccount|CloudIdentityCustomerAccount} resources match the domain.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The reseller account's resource name.
 *   Parent uses the format: accounts/{account_id}
 * @param {string} request.domain
 *   Required. Domain to fetch for Cloud Identity account customer.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [CheckCloudIdentityAccountsExistResponse]{@link google.cloud.channel.v1.CheckCloudIdentityAccountsExistResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.checkCloudIdentityAccountsExist(request);
 */
  checkCloudIdentityAccountsExist(
      request: protos.google.cloud.channel.v1.ICheckCloudIdentityAccountsExistRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.channel.v1.ICheckCloudIdentityAccountsExistResponse,
          protos.google.cloud.channel.v1.ICheckCloudIdentityAccountsExistRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.channel.v1.ICheckCloudIdentityAccountsExistResponse,
          protos.google.cloud.channel.v1.ICheckCloudIdentityAccountsExistRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.channel.v1.ICheckCloudIdentityAccountsExistResponse,
        protos.google.cloud.channel.v1.ICheckCloudIdentityAccountsExistRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.checkCloudIdentityAccountsExist(request, options, callback);
  }
  createCustomer(
      request: protos.google.cloud.channel.v1.ICreateCustomerRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.channel.v1.ICustomer,
        protos.google.cloud.channel.v1.ICreateCustomerRequest|undefined, {}|undefined
      ]>;
  createCustomer(
      request: protos.google.cloud.channel.v1.ICreateCustomerRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.channel.v1.ICustomer,
          protos.google.cloud.channel.v1.ICreateCustomerRequest|null|undefined,
          {}|null|undefined>): void;
  createCustomer(
      request: protos.google.cloud.channel.v1.ICreateCustomerRequest,
      callback: Callback<
          protos.google.cloud.channel.v1.ICustomer,
          protos.google.cloud.channel.v1.ICreateCustomerRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a new {@link google.cloud.channel.v1.Customer|Customer} resource under the reseller or distributor
 * account.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The reseller account making the request is different
 * from the reseller account in the API request.
 * * INVALID_ARGUMENT:
 *     * Required request parameters are missing or invalid.
 *     * Domain field value doesn't match the primary email domain.
 *
 * Return value:
 * The newly created {@link google.cloud.channel.v1.Customer|Customer} resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of reseller account in which to create the customer.
 *   Parent uses the format: accounts/{account_id}
 * @param {google.cloud.channel.v1.Customer} request.customer
 *   Required. The customer to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Customer]{@link google.cloud.channel.v1.Customer}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createCustomer(request);
 */
  createCustomer(
      request: protos.google.cloud.channel.v1.ICreateCustomerRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.channel.v1.ICustomer,
          protos.google.cloud.channel.v1.ICreateCustomerRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.channel.v1.ICustomer,
          protos.google.cloud.channel.v1.ICreateCustomerRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.channel.v1.ICustomer,
        protos.google.cloud.channel.v1.ICreateCustomerRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createCustomer(request, options, callback);
  }
  updateCustomer(
      request: protos.google.cloud.channel.v1.IUpdateCustomerRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.channel.v1.ICustomer,
        protos.google.cloud.channel.v1.IUpdateCustomerRequest|undefined, {}|undefined
      ]>;
  updateCustomer(
      request: protos.google.cloud.channel.v1.IUpdateCustomerRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.channel.v1.ICustomer,
          protos.google.cloud.channel.v1.IUpdateCustomerRequest|null|undefined,
          {}|null|undefined>): void;
  updateCustomer(
      request: protos.google.cloud.channel.v1.IUpdateCustomerRequest,
      callback: Callback<
          protos.google.cloud.channel.v1.ICustomer,
          protos.google.cloud.channel.v1.IUpdateCustomerRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates an existing {@link google.cloud.channel.v1.Customer|Customer} resource for the reseller or
 * distributor.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The reseller account making the request is different
 * from the reseller account in the API request.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 * * NOT_FOUND: No {@link google.cloud.channel.v1.Customer|Customer} resource found for the name in the request.
 *
 * Return value:
 * The updated {@link google.cloud.channel.v1.Customer|Customer} resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.channel.v1.Customer} request.customer
 *   Required. New contents of the customer.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The update mask that applies to the resource.
 *   Optional.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Customer]{@link google.cloud.channel.v1.Customer}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateCustomer(request);
 */
  updateCustomer(
      request: protos.google.cloud.channel.v1.IUpdateCustomerRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.channel.v1.ICustomer,
          protos.google.cloud.channel.v1.IUpdateCustomerRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.channel.v1.ICustomer,
          protos.google.cloud.channel.v1.IUpdateCustomerRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.channel.v1.ICustomer,
        protos.google.cloud.channel.v1.IUpdateCustomerRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'customer.name': request.customer!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateCustomer(request, options, callback);
  }
  deleteCustomer(
      request: protos.google.cloud.channel.v1.IDeleteCustomerRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.channel.v1.IDeleteCustomerRequest|undefined, {}|undefined
      ]>;
  deleteCustomer(
      request: protos.google.cloud.channel.v1.IDeleteCustomerRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.channel.v1.IDeleteCustomerRequest|null|undefined,
          {}|null|undefined>): void;
  deleteCustomer(
      request: protos.google.cloud.channel.v1.IDeleteCustomerRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.channel.v1.IDeleteCustomerRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes the given {@link google.cloud.channel.v1.Customer|Customer} permanently and irreversibly.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The account making the request does not own
 * this customer.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 * * FAILED_PRECONDITION: The customer has existing entitlements.
 * * NOT_FOUND: No {@link google.cloud.channel.v1.Customer|Customer} resource found for the name in the request.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the customer to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteCustomer(request);
 */
  deleteCustomer(
      request: protos.google.cloud.channel.v1.IDeleteCustomerRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.channel.v1.IDeleteCustomerRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.channel.v1.IDeleteCustomerRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.channel.v1.IDeleteCustomerRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteCustomer(request, options, callback);
  }
  getEntitlement(
      request: protos.google.cloud.channel.v1.IGetEntitlementRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.channel.v1.IEntitlement,
        protos.google.cloud.channel.v1.IGetEntitlementRequest|undefined, {}|undefined
      ]>;
  getEntitlement(
      request: protos.google.cloud.channel.v1.IGetEntitlementRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.channel.v1.IEntitlement,
          protos.google.cloud.channel.v1.IGetEntitlementRequest|null|undefined,
          {}|null|undefined>): void;
  getEntitlement(
      request: protos.google.cloud.channel.v1.IGetEntitlementRequest,
      callback: Callback<
          protos.google.cloud.channel.v1.IEntitlement,
          protos.google.cloud.channel.v1.IGetEntitlementRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Returns a requested {@link google.cloud.channel.v1.Entitlement|Entitlement} resource.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The customer doesn't belong to the reseller.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 * * NOT_FOUND: The customer entitlement was not found.
 *
 * Return value:
 * The requested {@link google.cloud.channel.v1.Entitlement|Entitlement} resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the entitlement to retrieve.
 *   Name uses the format:
 *   accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Entitlement]{@link google.cloud.channel.v1.Entitlement}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getEntitlement(request);
 */
  getEntitlement(
      request: protos.google.cloud.channel.v1.IGetEntitlementRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.channel.v1.IEntitlement,
          protos.google.cloud.channel.v1.IGetEntitlementRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.channel.v1.IEntitlement,
          protos.google.cloud.channel.v1.IGetEntitlementRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.channel.v1.IEntitlement,
        protos.google.cloud.channel.v1.IGetEntitlementRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getEntitlement(request, options, callback);
  }
  getChannelPartnerLink(
      request: protos.google.cloud.channel.v1.IGetChannelPartnerLinkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.channel.v1.IChannelPartnerLink,
        protos.google.cloud.channel.v1.IGetChannelPartnerLinkRequest|undefined, {}|undefined
      ]>;
  getChannelPartnerLink(
      request: protos.google.cloud.channel.v1.IGetChannelPartnerLinkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.channel.v1.IChannelPartnerLink,
          protos.google.cloud.channel.v1.IGetChannelPartnerLinkRequest|null|undefined,
          {}|null|undefined>): void;
  getChannelPartnerLink(
      request: protos.google.cloud.channel.v1.IGetChannelPartnerLinkRequest,
      callback: Callback<
          protos.google.cloud.channel.v1.IChannelPartnerLink,
          protos.google.cloud.channel.v1.IGetChannelPartnerLinkRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Returns a requested {@link google.cloud.channel.v1.ChannelPartnerLink|ChannelPartnerLink} resource.
 * You must be a distributor to call this method.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The reseller account making the request is different
 * from the reseller account in the API request.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 * * NOT_FOUND: ChannelPartnerLink resource not found because of an
 * invalid channel partner link name.
 *
 * Return value:
 * The {@link google.cloud.channel.v1.ChannelPartnerLink|ChannelPartnerLink} resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the channel partner link to retrieve.
 *   Name uses the format: accounts/{account_id}/channelPartnerLinks/{id}
 *   where {id} is the Cloud Identity ID of the partner.
 * @param {google.cloud.channel.v1.ChannelPartnerLinkView} [request.view]
 *   Optional. The level of granularity the ChannelPartnerLink will display.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ChannelPartnerLink]{@link google.cloud.channel.v1.ChannelPartnerLink}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getChannelPartnerLink(request);
 */
  getChannelPartnerLink(
      request: protos.google.cloud.channel.v1.IGetChannelPartnerLinkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.channel.v1.IChannelPartnerLink,
          protos.google.cloud.channel.v1.IGetChannelPartnerLinkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.channel.v1.IChannelPartnerLink,
          protos.google.cloud.channel.v1.IGetChannelPartnerLinkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.channel.v1.IChannelPartnerLink,
        protos.google.cloud.channel.v1.IGetChannelPartnerLinkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getChannelPartnerLink(request, options, callback);
  }
  createChannelPartnerLink(
      request: protos.google.cloud.channel.v1.ICreateChannelPartnerLinkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.channel.v1.IChannelPartnerLink,
        protos.google.cloud.channel.v1.ICreateChannelPartnerLinkRequest|undefined, {}|undefined
      ]>;
  createChannelPartnerLink(
      request: protos.google.cloud.channel.v1.ICreateChannelPartnerLinkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.channel.v1.IChannelPartnerLink,
          protos.google.cloud.channel.v1.ICreateChannelPartnerLinkRequest|null|undefined,
          {}|null|undefined>): void;
  createChannelPartnerLink(
      request: protos.google.cloud.channel.v1.ICreateChannelPartnerLinkRequest,
      callback: Callback<
          protos.google.cloud.channel.v1.IChannelPartnerLink,
          protos.google.cloud.channel.v1.ICreateChannelPartnerLinkRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Initiates a channel partner link between a distributor and a reseller, or
 * between resellers in an n-tier reseller channel.
 * Invited partners need to follow the invite_link_uri provided in the
 * response to accept. After accepting the invitation, a link is set up
 * between the two parties.
 * You must be a distributor to call this method.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The reseller account making the request is different
 * from the reseller account in the API request.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 * * ALREADY_EXISTS: The ChannelPartnerLink sent in the request already
 * exists.
 * * NOT_FOUND: No Cloud Identity customer exists for provided domain.
 * * INTERNAL: Any non-user error related to a technical issue in the
 * backend. Contact Cloud Channel support.
 * * UNKNOWN: Any non-user error related to a technical issue in the backend.
 * Contact Cloud Channel support.
 *
 * Return value:
 * The new {@link google.cloud.channel.v1.ChannelPartnerLink|ChannelPartnerLink} resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Create a channel partner link for the provided reseller account's
 *   resource name.
 *   Parent uses the format: accounts/{account_id}
 * @param {google.cloud.channel.v1.ChannelPartnerLink} request.channelPartnerLink
 *   Required. The channel partner link to create.
 *   Either channel_partner_link.reseller_cloud_identity_id or domain can be
 *   used to create a link.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ChannelPartnerLink]{@link google.cloud.channel.v1.ChannelPartnerLink}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createChannelPartnerLink(request);
 */
  createChannelPartnerLink(
      request: protos.google.cloud.channel.v1.ICreateChannelPartnerLinkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.channel.v1.IChannelPartnerLink,
          protos.google.cloud.channel.v1.ICreateChannelPartnerLinkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.channel.v1.IChannelPartnerLink,
          protos.google.cloud.channel.v1.ICreateChannelPartnerLinkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.channel.v1.IChannelPartnerLink,
        protos.google.cloud.channel.v1.ICreateChannelPartnerLinkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createChannelPartnerLink(request, options, callback);
  }
  updateChannelPartnerLink(
      request: protos.google.cloud.channel.v1.IUpdateChannelPartnerLinkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.channel.v1.IChannelPartnerLink,
        protos.google.cloud.channel.v1.IUpdateChannelPartnerLinkRequest|undefined, {}|undefined
      ]>;
  updateChannelPartnerLink(
      request: protos.google.cloud.channel.v1.IUpdateChannelPartnerLinkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.channel.v1.IChannelPartnerLink,
          protos.google.cloud.channel.v1.IUpdateChannelPartnerLinkRequest|null|undefined,
          {}|null|undefined>): void;
  updateChannelPartnerLink(
      request: protos.google.cloud.channel.v1.IUpdateChannelPartnerLinkRequest,
      callback: Callback<
          protos.google.cloud.channel.v1.IChannelPartnerLink,
          protos.google.cloud.channel.v1.IUpdateChannelPartnerLinkRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates a channel partner link. Distributors call this method to change a
 * link's status. For example, to suspend a partner link.
 * You must be a distributor to call this method.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The reseller account making the request is different
 * from the reseller account in the API request.
 * * INVALID_ARGUMENT:
 *     * Required request parameters are missing or invalid.
 *     * Link state cannot change from invited to active or suspended.
 *     * Cannot send reseller_cloud_identity_id, invite_url, or name in update
 *     mask.
 * * NOT_FOUND: ChannelPartnerLink resource not found.
 * * INTERNAL: Any non-user error related to a technical issue in the
 * backend. Contact Cloud Channel support.
 * * UNKNOWN: Any non-user error related to a technical issue in the backend.
 * Contact Cloud Channel support.
 *
 * Return value:
 * The updated {@link google.cloud.channel.v1.ChannelPartnerLink|ChannelPartnerLink} resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the channel partner link to cancel.
 *   Name uses the format: accounts/{account_id}/channelPartnerLinks/{id}
 *   where {id} is the Cloud Identity ID of the partner.
 * @param {google.cloud.channel.v1.ChannelPartnerLink} request.channelPartnerLink
 *   Required. The channel partner link to update. Only channel_partner_link.link_state
 *   is allowed for updates.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. The update mask that applies to the resource.
 *   The only allowable value for an update mask is
 *   channel_partner_link.link_state.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ChannelPartnerLink]{@link google.cloud.channel.v1.ChannelPartnerLink}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateChannelPartnerLink(request);
 */
  updateChannelPartnerLink(
      request: protos.google.cloud.channel.v1.IUpdateChannelPartnerLinkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.channel.v1.IChannelPartnerLink,
          protos.google.cloud.channel.v1.IUpdateChannelPartnerLinkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.channel.v1.IChannelPartnerLink,
          protos.google.cloud.channel.v1.IUpdateChannelPartnerLinkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.channel.v1.IChannelPartnerLink,
        protos.google.cloud.channel.v1.IUpdateChannelPartnerLinkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateChannelPartnerLink(request, options, callback);
  }
  registerSubscriber(
      request: protos.google.cloud.channel.v1.IRegisterSubscriberRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.channel.v1.IRegisterSubscriberResponse,
        protos.google.cloud.channel.v1.IRegisterSubscriberRequest|undefined, {}|undefined
      ]>;
  registerSubscriber(
      request: protos.google.cloud.channel.v1.IRegisterSubscriberRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.channel.v1.IRegisterSubscriberResponse,
          protos.google.cloud.channel.v1.IRegisterSubscriberRequest|null|undefined,
          {}|null|undefined>): void;
  registerSubscriber(
      request: protos.google.cloud.channel.v1.IRegisterSubscriberRequest,
      callback: Callback<
          protos.google.cloud.channel.v1.IRegisterSubscriberResponse,
          protos.google.cloud.channel.v1.IRegisterSubscriberRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Registers a service account with subscriber privileges on the Cloud Pub/Sub
 * topic for this Channel Services account. After you create a
 * subscriber, you get the events through {@link google.cloud.channel.v1.SubscriberEvent|SubscriberEvent}
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The reseller account making the request and the
 * provided reseller account are different, or the impersonated user
 * is not a super admin.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 * * INTERNAL: Any non-user error related to a technical issue in the
 * backend. Contact Cloud Channel support.
 * * UNKNOWN: Any non-user error related to a technical issue in the backend.
 * Contact Cloud Channel support.
 *
 * Return value:
 * The topic name with the registered service email address.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.account
 *   Required. Resource name of the account.
 * @param {string} request.serviceAccount
 *   Required. Service account that provides subscriber access to the registered topic.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [RegisterSubscriberResponse]{@link google.cloud.channel.v1.RegisterSubscriberResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.registerSubscriber(request);
 */
  registerSubscriber(
      request: protos.google.cloud.channel.v1.IRegisterSubscriberRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.channel.v1.IRegisterSubscriberResponse,
          protos.google.cloud.channel.v1.IRegisterSubscriberRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.channel.v1.IRegisterSubscriberResponse,
          protos.google.cloud.channel.v1.IRegisterSubscriberRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.channel.v1.IRegisterSubscriberResponse,
        protos.google.cloud.channel.v1.IRegisterSubscriberRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'account': request.account || '',
    });
    this.initialize();
    return this.innerApiCalls.registerSubscriber(request, options, callback);
  }
  unregisterSubscriber(
      request: protos.google.cloud.channel.v1.IUnregisterSubscriberRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.channel.v1.IUnregisterSubscriberResponse,
        protos.google.cloud.channel.v1.IUnregisterSubscriberRequest|undefined, {}|undefined
      ]>;
  unregisterSubscriber(
      request: protos.google.cloud.channel.v1.IUnregisterSubscriberRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.channel.v1.IUnregisterSubscriberResponse,
          protos.google.cloud.channel.v1.IUnregisterSubscriberRequest|null|undefined,
          {}|null|undefined>): void;
  unregisterSubscriber(
      request: protos.google.cloud.channel.v1.IUnregisterSubscriberRequest,
      callback: Callback<
          protos.google.cloud.channel.v1.IUnregisterSubscriberResponse,
          protos.google.cloud.channel.v1.IUnregisterSubscriberRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Unregisters a service account with subscriber privileges on the Cloud
 * Pub/Sub topic created for this Channel Services account. If there are no
 * service accounts left with subscriber privileges, this deletes the topic.
 * You can call ListSubscribers to check for these accounts.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The reseller account making the request and the
 * provided reseller account are different, or the impersonated user
 * is not a super admin.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 * * NOT_FOUND: The topic resource doesn't exist.
 * * INTERNAL: Any non-user error related to a technical issue in the
 * backend. Contact Cloud Channel support.
 * * UNKNOWN: Any non-user error related to a technical issue in the backend.
 * Contact Cloud Channel support.
 *
 * Return value:
 * The topic name that unregistered the service email address.
 * Returns a success response if the service email address wasn't registered
 * with the topic.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.account
 *   Required. Resource name of the account.
 * @param {string} request.serviceAccount
 *   Required. Service account to unregister from subscriber access to the topic.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [UnregisterSubscriberResponse]{@link google.cloud.channel.v1.UnregisterSubscriberResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.unregisterSubscriber(request);
 */
  unregisterSubscriber(
      request: protos.google.cloud.channel.v1.IUnregisterSubscriberRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.channel.v1.IUnregisterSubscriberResponse,
          protos.google.cloud.channel.v1.IUnregisterSubscriberRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.channel.v1.IUnregisterSubscriberResponse,
          protos.google.cloud.channel.v1.IUnregisterSubscriberRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.channel.v1.IUnregisterSubscriberResponse,
        protos.google.cloud.channel.v1.IUnregisterSubscriberRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'account': request.account || '',
    });
    this.initialize();
    return this.innerApiCalls.unregisterSubscriber(request, options, callback);
  }

  provisionCloudIdentity(
      request: protos.google.cloud.channel.v1.IProvisionCloudIdentityRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.channel.v1.ICustomer, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  provisionCloudIdentity(
      request: protos.google.cloud.channel.v1.IProvisionCloudIdentityRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.channel.v1.ICustomer, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  provisionCloudIdentity(
      request: protos.google.cloud.channel.v1.IProvisionCloudIdentityRequest,
      callback: Callback<
          LROperation<protos.google.cloud.channel.v1.ICustomer, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a Cloud Identity for the given customer using the customer's
 * information, or the information provided here.
 *
 * Possible error codes:
 *
 * *  PERMISSION_DENIED: The customer doesn't belong to the reseller.
 * *  INVALID_ARGUMENT: Required request parameters are missing or invalid.
 * *  NOT_FOUND: The customer was not found.
 * *  ALREADY_EXISTS: The customer's primary email already exists. Retry
 *    after changing the customer's primary contact email.
 * * INTERNAL: Any non-user error related to a technical issue in the
 * backend. Contact Cloud Channel support.
 * * UNKNOWN: Any non-user error related to a technical issue in the backend.
 * Contact Cloud Channel support.
 *
 * Return value:
 * The ID of a long-running operation.
 *
 * To get the results of the operation, call the GetOperation method of
 * CloudChannelOperationsService. The Operation metadata contains an
 * instance of {@link google.cloud.channel.v1.OperationMetadata|OperationMetadata}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.customer
 *   Required. Resource name of the customer.
 *   Format: accounts/{account_id}/customers/{customer_id}
 * @param {google.cloud.channel.v1.CloudIdentityInfo} request.cloudIdentityInfo
 *   CloudIdentity-specific customer information.
 * @param {google.cloud.channel.v1.AdminUser} request.user
 *   Admin user information.
 * @param {boolean} request.validateOnly
 *   Validate the request and preview the review, but do not post it.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.provisionCloudIdentity(request);
 * const [response] = await operation.promise();
 */
  provisionCloudIdentity(
      request: protos.google.cloud.channel.v1.IProvisionCloudIdentityRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.channel.v1.ICustomer, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.channel.v1.ICustomer, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.channel.v1.ICustomer, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'customer': request.customer || '',
    });
    this.initialize();
    return this.innerApiCalls.provisionCloudIdentity(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `provisionCloudIdentity()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkProvisionCloudIdentityProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkProvisionCloudIdentityProgress(name: string): Promise<LROperation<protos.google.cloud.channel.v1.Customer, protos.google.cloud.channel.v1.OperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.provisionCloudIdentity, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.channel.v1.Customer, protos.google.cloud.channel.v1.OperationMetadata>;
  }
  createEntitlement(
      request: protos.google.cloud.channel.v1.ICreateEntitlementRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createEntitlement(
      request: protos.google.cloud.channel.v1.ICreateEntitlementRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createEntitlement(
      request: protos.google.cloud.channel.v1.ICreateEntitlementRequest,
      callback: Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates an entitlement for a customer.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The customer doesn't belong to the reseller.
 * * INVALID_ARGUMENT:
 *     * Required request parameters are missing or invalid.
 *     * There is already a customer entitlement for a SKU from the same
 *     product family.
 * * INVALID_VALUE: Make sure the OfferId is valid. If it is, contact
 * Google Channel support for further troubleshooting.
 * * NOT_FOUND: The customer or offer resource was not found.
 * * ALREADY_EXISTS:
 *     * The SKU was already purchased for the customer.
 *     * The customer's primary email already exists. Retry
 *     after changing the customer's primary contact email.
 * * CONDITION_NOT_MET or FAILED_PRECONDITION:
 *     * The domain required for purchasing a SKU has not been verified.
 *     * A pre-requisite SKU required to purchase an Add-On SKU is missing.
 *     For example, Google Workspace Business Starter is required to purchase
 *     Vault or Drive.
 *     * (Developer accounts only) Reseller and resold domain must meet the
 *     following naming requirements:
 *         * Domain names must start with goog-test.
 *         * Domain names must include the reseller domain.
 * * INTERNAL: Any non-user error related to a technical issue in the
 * backend. Contact Cloud Channel support.
 * * UNKNOWN: Any non-user error related to a technical issue in the backend.
 * Contact Cloud Channel support.
 *
 * Return value:
 * The ID of a long-running operation.
 *
 * To get the results of the operation, call the GetOperation method of
 * CloudChannelOperationsService. The Operation metadata will contain an
 * instance of {@link google.cloud.channel.v1.OperationMetadata|OperationMetadata}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the reseller's customer account in which to create the
 *   entitlement.
 *   Parent uses the format: accounts/{account_id}/customers/{customer_id}
 * @param {google.cloud.channel.v1.Entitlement} request.entitlement
 *   Required. The entitlement to create.
 * @param {string} [request.requestId]
 *   Optional. You can specify an optional unique request ID, and if you need to retry
 *   your request, the server will know to ignore the request if it's complete.
 *
 *   For example, you make an initial request and the request times out. If you
 *   make the request again with the same request ID, the server can check if
 *   it received the original operation with the same request ID. If it did, it
 *   will ignore the second request.
 *
 *   The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122)
 *   with the exception that zero UUID is not supported
 *   (`00000000-0000-0000-0000-000000000000`).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.createEntitlement(request);
 * const [response] = await operation.promise();
 */
  createEntitlement(
      request: protos.google.cloud.channel.v1.ICreateEntitlementRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createEntitlement(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createEntitlement()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkCreateEntitlementProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkCreateEntitlementProgress(name: string): Promise<LROperation<protos.google.cloud.channel.v1.Entitlement, protos.google.cloud.channel.v1.OperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.createEntitlement, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.channel.v1.Entitlement, protos.google.cloud.channel.v1.OperationMetadata>;
  }
  changeParameters(
      request: protos.google.cloud.channel.v1.IChangeParametersRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  changeParameters(
      request: protos.google.cloud.channel.v1.IChangeParametersRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  changeParameters(
      request: protos.google.cloud.channel.v1.IChangeParametersRequest,
      callback: Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Change parameters of the entitlement.
 *
 * An entitlement update is a long-running operation and it updates the
 * entitlement as a result of fulfillment.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The customer doesn't belong to the reseller.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 * For example, the number of seats being changed is greater than the allowed
 * number of max seats, or decreasing seats for a commitment based plan.
 * * NOT_FOUND: Entitlement resource not found.
 * * INTERNAL: Any non-user error related to a technical issue in the
 * backend. Contact Cloud Channel support.
 * * UNKNOWN: Any non-user error related to a technical issue in the backend.
 * Contact Cloud Channel support.
 *
 * Return value:
 * The ID of a long-running operation.
 *
 * To get the results of the operation, call the GetOperation method of
 * CloudChannelOperationsService. The Operation metadata will contain an
 * instance of {@link google.cloud.channel.v1.OperationMetadata|OperationMetadata}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the entitlement to update.
 *   Name uses the format:
 *   accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}
 * @param {number[]} request.parameters
 *   Required. Entitlement parameters to update. You can only change editable parameters.
 * @param {string} [request.requestId]
 *   Optional. You can specify an optional unique request ID, and if you need to retry
 *   your request, the server will know to ignore the request if it's complete.
 *
 *   For example, you make an initial request and the request times out. If you
 *   make the request again with the same request ID, the server can check if
 *   it received the original operation with the same request ID. If it did, it
 *   will ignore the second request.
 *
 *   The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122)
 *   with the exception that zero UUID is not supported
 *   (`00000000-0000-0000-0000-000000000000`).
 * @param {string} [request.purchaseOrderId]
 *   Optional. Purchase order ID provided by the reseller.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.changeParameters(request);
 * const [response] = await operation.promise();
 */
  changeParameters(
      request: protos.google.cloud.channel.v1.IChangeParametersRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.changeParameters(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `changeParameters()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkChangeParametersProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkChangeParametersProgress(name: string): Promise<LROperation<protos.google.cloud.channel.v1.Entitlement, protos.google.cloud.channel.v1.OperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.changeParameters, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.channel.v1.Entitlement, protos.google.cloud.channel.v1.OperationMetadata>;
  }
  changeRenewalSettings(
      request: protos.google.cloud.channel.v1.IChangeRenewalSettingsRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  changeRenewalSettings(
      request: protos.google.cloud.channel.v1.IChangeRenewalSettingsRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  changeRenewalSettings(
      request: protos.google.cloud.channel.v1.IChangeRenewalSettingsRequest,
      callback: Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates the renewal settings for an existing customer entitlement.
 *
 * An entitlement update is a long-running operation and it updates the
 * entitlement as a result of fulfillment.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The customer doesn't belong to the reseller.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 * * NOT_FOUND: Entitlement resource not found.
 * * NOT_COMMITMENT_PLAN: Renewal Settings are only applicable for a
 * commitment plan. Can't enable or disable renewals for non-commitment plans.
 * * INTERNAL: Any non-user error related to a technical issue in the
 * backend. Contact Cloud Channel support.
 * * UNKNOWN: Any non-user error related to a technical issue in the backend.
 *   Contact Cloud Channel support.
 *
 * Return value:
 * The ID of a long-running operation.
 *
 * To get the results of the operation, call the GetOperation method of
 * CloudChannelOperationsService. The Operation metadata will contain an
 * instance of {@link google.cloud.channel.v1.OperationMetadata|OperationMetadata}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the entitlement to update.
 *   Name uses the format:
 *   accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}
 * @param {google.cloud.channel.v1.RenewalSettings} request.renewalSettings
 *   Required. New renewal settings.
 * @param {string} [request.requestId]
 *   Optional. You can specify an optional unique request ID, and if you need to retry
 *   your request, the server will know to ignore the request if it's complete.
 *
 *   For example, you make an initial request and the request times out. If you
 *   make the request again with the same request ID, the server can check if
 *   it received the original operation with the same request ID. If it did, it
 *   will ignore the second request.
 *
 *   The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122)
 *   with the exception that zero UUID is not supported
 *   (`00000000-0000-0000-0000-000000000000`).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.changeRenewalSettings(request);
 * const [response] = await operation.promise();
 */
  changeRenewalSettings(
      request: protos.google.cloud.channel.v1.IChangeRenewalSettingsRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.changeRenewalSettings(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `changeRenewalSettings()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkChangeRenewalSettingsProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkChangeRenewalSettingsProgress(name: string): Promise<LROperation<protos.google.cloud.channel.v1.Entitlement, protos.google.cloud.channel.v1.OperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.changeRenewalSettings, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.channel.v1.Entitlement, protos.google.cloud.channel.v1.OperationMetadata>;
  }
  changeOffer(
      request: protos.google.cloud.channel.v1.IChangeOfferRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  changeOffer(
      request: protos.google.cloud.channel.v1.IChangeOfferRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  changeOffer(
      request: protos.google.cloud.channel.v1.IChangeOfferRequest,
      callback: Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates the Offer for an existing customer entitlement.
 *
 * An entitlement update is a long-running operation and it updates the
 * entitlement as a result of fulfillment.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The customer doesn't belong to the reseller.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 * * NOT_FOUND: Offer or Entitlement resource not found.
 * * INTERNAL: Any non-user error related to a technical issue in the
 * backend. Contact Cloud Channel support.
 * * UNKNOWN: Any non-user error related to a technical issue in the backend.
 * Contact Cloud Channel support.
 *
 * Return value:
 * The ID of a long-running operation.
 *
 * To get the results of the operation, call the GetOperation method of
 * CloudChannelOperationsService. The Operation metadata will contain an
 * instance of {@link google.cloud.channel.v1.OperationMetadata|OperationMetadata}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the entitlement to update.
 *   Name uses the format:
 *   accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}
 * @param {string} request.offer
 *   Required. New Offer.
 *   Format: accounts/{account_id}/offers/{offer_id}.
 * @param {number[]} [request.parameters]
 *   Optional. Parameters needed to purchase the Offer.
 * @param {string} [request.purchaseOrderId]
 *   Optional. Purchase order id provided by the reseller.
 * @param {string} [request.requestId]
 *   Optional. You can specify an optional unique request ID, and if you need to retry
 *   your request, the server will know to ignore the request if it's complete.
 *
 *   For example, you make an initial request and the request times out. If you
 *   make the request again with the same request ID, the server can check if
 *   it received the original operation with the same request ID. If it did, it
 *   will ignore the second request.
 *
 *   The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122)
 *   with the exception that zero UUID is not supported
 *   (`00000000-0000-0000-0000-000000000000`).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.changeOffer(request);
 * const [response] = await operation.promise();
 */
  changeOffer(
      request: protos.google.cloud.channel.v1.IChangeOfferRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.changeOffer(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `changeOffer()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkChangeOfferProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkChangeOfferProgress(name: string): Promise<LROperation<protos.google.cloud.channel.v1.Entitlement, protos.google.cloud.channel.v1.OperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.changeOffer, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.channel.v1.Entitlement, protos.google.cloud.channel.v1.OperationMetadata>;
  }
  startPaidService(
      request: protos.google.cloud.channel.v1.IStartPaidServiceRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  startPaidService(
      request: protos.google.cloud.channel.v1.IStartPaidServiceRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  startPaidService(
      request: protos.google.cloud.channel.v1.IStartPaidServiceRequest,
      callback: Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Starts paid service for a trial entitlement.
 *
 * Starts paid service for a trial entitlement immediately. This method is
 * only applicable if a plan is set up for a trial entitlement but has some
 * trial days remaining.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The customer doesn't belong to the reseller.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 * * NOT_FOUND: Entitlement resource not found.
 * * FAILED_PRECONDITION/NOT_IN_TRIAL: This method only works for
 * entitlement on trial plans.
 * * INTERNAL: Any non-user error related to a technical issue in the
 * backend. Contact Cloud Channel support.
 * * UNKNOWN: Any non-user error related to a technical issue in the backend.
 * Contact Cloud Channel support.
 *
 * Return value:
 * The ID of a long-running operation.
 *
 * To get the results of the operation, call the GetOperation method of
 * CloudChannelOperationsService. The Operation metadata will contain an
 * instance of {@link google.cloud.channel.v1.OperationMetadata|OperationMetadata}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the entitlement to start a paid service for.
 *   Name uses the format:
 *   accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}
 * @param {string} [request.requestId]
 *   Optional. You can specify an optional unique request ID, and if you need to retry
 *   your request, the server will know to ignore the request if it's complete.
 *
 *   For example, you make an initial request and the request times out. If you
 *   make the request again with the same request ID, the server can check if
 *   it received the original operation with the same request ID. If it did, it
 *   will ignore the second request.
 *
 *   The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122)
 *   with the exception that zero UUID is not supported
 *   (`00000000-0000-0000-0000-000000000000`).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.startPaidService(request);
 * const [response] = await operation.promise();
 */
  startPaidService(
      request: protos.google.cloud.channel.v1.IStartPaidServiceRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.startPaidService(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `startPaidService()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkStartPaidServiceProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkStartPaidServiceProgress(name: string): Promise<LROperation<protos.google.cloud.channel.v1.Entitlement, protos.google.cloud.channel.v1.OperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.startPaidService, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.channel.v1.Entitlement, protos.google.cloud.channel.v1.OperationMetadata>;
  }
  suspendEntitlement(
      request: protos.google.cloud.channel.v1.ISuspendEntitlementRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  suspendEntitlement(
      request: protos.google.cloud.channel.v1.ISuspendEntitlementRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  suspendEntitlement(
      request: protos.google.cloud.channel.v1.ISuspendEntitlementRequest,
      callback: Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Suspends a previously fulfilled entitlement.
 *
 * An entitlement suspension is a long-running operation.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The customer doesn't belong to the reseller.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 * * NOT_FOUND: Entitlement resource not found.
 * * NOT_ACTIVE: Entitlement is not active.
 * * INTERNAL: Any non-user error related to a technical issue in the
 * backend. Contact Cloud Channel support.
 * * UNKNOWN: Any non-user error related to a technical issue in the backend.
 * Contact Cloud Channel support.
 *
 * Return value:
 * The ID of a long-running operation.
 *
 * To get the results of the operation, call the GetOperation method of
 * CloudChannelOperationsService. The Operation metadata will contain an
 * instance of {@link google.cloud.channel.v1.OperationMetadata|OperationMetadata}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the entitlement to suspend.
 *   Name uses the format:
 *   accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}
 * @param {string} [request.requestId]
 *   Optional. You can specify an optional unique request ID, and if you need to retry
 *   your request, the server will know to ignore the request if it's complete.
 *
 *   For example, you make an initial request and the request times out. If you
 *   make the request again with the same request ID, the server can check if
 *   it received the original operation with the same request ID. If it did, it
 *   will ignore the second request.
 *
 *   The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122)
 *   with the exception that zero UUID is not supported
 *   (`00000000-0000-0000-0000-000000000000`).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.suspendEntitlement(request);
 * const [response] = await operation.promise();
 */
  suspendEntitlement(
      request: protos.google.cloud.channel.v1.ISuspendEntitlementRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.suspendEntitlement(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `suspendEntitlement()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkSuspendEntitlementProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkSuspendEntitlementProgress(name: string): Promise<LROperation<protos.google.cloud.channel.v1.Entitlement, protos.google.cloud.channel.v1.OperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.suspendEntitlement, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.channel.v1.Entitlement, protos.google.cloud.channel.v1.OperationMetadata>;
  }
  cancelEntitlement(
      request: protos.google.cloud.channel.v1.ICancelEntitlementRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  cancelEntitlement(
      request: protos.google.cloud.channel.v1.ICancelEntitlementRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  cancelEntitlement(
      request: protos.google.cloud.channel.v1.ICancelEntitlementRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Cancels a previously fulfilled entitlement.
 *
 * An entitlement cancellation is a long-running operation.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The reseller account making the request is different
 * from the reseller account in the API request.
 * * FAILED_PRECONDITION: There are Google Cloud projects linked to the
 * Google Cloud entitlement's Cloud Billing subaccount.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 * * NOT_FOUND: Entitlement resource not found.
 * * DELETION_TYPE_NOT_ALLOWED: Cancel is only allowed for Google Workspace
 * add-ons, or entitlements for Google Cloud's development platform.
 * * INTERNAL: Any non-user error related to a technical issue in the
 * backend. Contact Cloud Channel support.
 * * UNKNOWN: Any non-user error related to a technical issue in the backend.
 * Contact Cloud Channel support.
 *
 * Return value:
 * The ID of a long-running operation.
 *
 * To get the results of the operation, call the GetOperation method of
 * CloudChannelOperationsService. The response will contain
 * google.protobuf.Empty on success. The Operation metadata will contain an
 * instance of {@link google.cloud.channel.v1.OperationMetadata|OperationMetadata}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the entitlement to cancel.
 *   Name uses the format:
 *   accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}
 * @param {string} [request.requestId]
 *   Optional. You can specify an optional unique request ID, and if you need to retry
 *   your request, the server will know to ignore the request if it's complete.
 *
 *   For example, you make an initial request and the request times out. If you
 *   make the request again with the same request ID, the server can check if
 *   it received the original operation with the same request ID. If it did, it
 *   will ignore the second request.
 *
 *   The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122)
 *   with the exception that zero UUID is not supported
 *   (`00000000-0000-0000-0000-000000000000`).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.cancelEntitlement(request);
 * const [response] = await operation.promise();
 */
  cancelEntitlement(
      request: protos.google.cloud.channel.v1.ICancelEntitlementRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.cancelEntitlement(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `cancelEntitlement()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkCancelEntitlementProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkCancelEntitlementProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.channel.v1.OperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.cancelEntitlement, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.channel.v1.OperationMetadata>;
  }
  activateEntitlement(
      request: protos.google.cloud.channel.v1.IActivateEntitlementRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  activateEntitlement(
      request: protos.google.cloud.channel.v1.IActivateEntitlementRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  activateEntitlement(
      request: protos.google.cloud.channel.v1.IActivateEntitlementRequest,
      callback: Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Activates a previously suspended entitlement. Entitlements suspended for
 * pending ToS acceptance can't be activated using this method.
 *
 * An entitlement activation is a long-running operation and it updates
 * the state of the customer entitlement.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The reseller account making the request is different
 * from the reseller account in the API request.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 * * NOT_FOUND: Entitlement resource not found.
 * * SUSPENSION_NOT_RESELLER_INITIATED: Can only activate reseller-initiated
 * suspensions and entitlements that have accepted the TOS.
 * * NOT_SUSPENDED: Can only activate suspended entitlements not in an ACTIVE
 * state.
 * * INTERNAL: Any non-user error related to a technical issue in the
 * backend. Contact Cloud Channel support.
 * * UNKNOWN: Any non-user error related to a technical issue in the backend.
 * Contact Cloud Channel support.
 *
 * Return value:
 * The ID of a long-running operation.
 *
 * To get the results of the operation, call the GetOperation method of
 * CloudChannelOperationsService. The Operation metadata will contain an
 * instance of {@link google.cloud.channel.v1.OperationMetadata|OperationMetadata}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the entitlement to activate.
 *   Name uses the format:
 *   accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}
 * @param {string} [request.requestId]
 *   Optional. You can specify an optional unique request ID, and if you need to retry
 *   your request, the server will know to ignore the request if it's complete.
 *
 *   For example, you make an initial request and the request times out. If you
 *   make the request again with the same request ID, the server can check if
 *   it received the original operation with the same request ID. If it did, it
 *   will ignore the second request.
 *
 *   The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122)
 *   with the exception that zero UUID is not supported
 *   (`00000000-0000-0000-0000-000000000000`).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.activateEntitlement(request);
 * const [response] = await operation.promise();
 */
  activateEntitlement(
      request: protos.google.cloud.channel.v1.IActivateEntitlementRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.activateEntitlement(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `activateEntitlement()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkActivateEntitlementProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkActivateEntitlementProgress(name: string): Promise<LROperation<protos.google.cloud.channel.v1.Entitlement, protos.google.cloud.channel.v1.OperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.activateEntitlement, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.channel.v1.Entitlement, protos.google.cloud.channel.v1.OperationMetadata>;
  }
  transferEntitlements(
      request: protos.google.cloud.channel.v1.ITransferEntitlementsRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.channel.v1.ITransferEntitlementsResponse, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  transferEntitlements(
      request: protos.google.cloud.channel.v1.ITransferEntitlementsRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.channel.v1.ITransferEntitlementsResponse, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  transferEntitlements(
      request: protos.google.cloud.channel.v1.ITransferEntitlementsRequest,
      callback: Callback<
          LROperation<protos.google.cloud.channel.v1.ITransferEntitlementsResponse, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Transfers customer entitlements to new reseller.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The customer doesn't belong to the reseller.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 * * NOT_FOUND: The customer or offer resource was not found.
 * * ALREADY_EXISTS: The SKU was already transferred for the customer.
 * * CONDITION_NOT_MET or FAILED_PRECONDITION:
 *     * The SKU requires domain verification to transfer, but the domain is
 *     not verified.
 *     * An Add-On SKU (example, Vault or Drive) is missing the
 *     pre-requisite SKU (example, G Suite Basic).
 *     * (Developer accounts only) Reseller and resold domain must meet the
 *     following naming requirements:
 *         * Domain names must start with goog-test.
 *         * Domain names must include the reseller domain.
 *     * Specify all transferring entitlements.
 * * INTERNAL: Any non-user error related to a technical issue in the
 * backend. Contact Cloud Channel support.
 * * UNKNOWN: Any non-user error related to a technical issue in the backend.
 * Contact Cloud Channel support.
 *
 * Return value:
 * The ID of a long-running operation.
 *
 * To get the results of the operation, call the GetOperation method of
 * CloudChannelOperationsService. The Operation metadata will contain an
 * instance of {@link google.cloud.channel.v1.OperationMetadata|OperationMetadata}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the reseller's customer account that will receive
 *   transferred entitlements.
 *   Parent uses the format: accounts/{account_id}/customers/{customer_id}
 * @param {number[]} request.entitlements
 *   Required. The new entitlements to create or transfer.
 * @param {string} request.authToken
 *   The super admin of the resold customer generates this token to
 *   authorize a reseller to access their Cloud Identity and purchase
 *   entitlements on their behalf. You can omit this token after authorization.
 *   See https://support.google.com/a/answer/7643790 for more details.
 * @param {string} [request.requestId]
 *   Optional. You can specify an optional unique request ID, and if you need to retry
 *   your request, the server will know to ignore the request if it's complete.
 *
 *   For example, you make an initial request and the request times out. If you
 *   make the request again with the same request ID, the server can check if
 *   it received the original operation with the same request ID. If it did, it
 *   will ignore the second request.
 *
 *   The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122)
 *   with the exception that zero UUID is not supported
 *   (`00000000-0000-0000-0000-000000000000`).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.transferEntitlements(request);
 * const [response] = await operation.promise();
 */
  transferEntitlements(
      request: protos.google.cloud.channel.v1.ITransferEntitlementsRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.channel.v1.ITransferEntitlementsResponse, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.channel.v1.ITransferEntitlementsResponse, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.channel.v1.ITransferEntitlementsResponse, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.transferEntitlements(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `transferEntitlements()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkTransferEntitlementsProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkTransferEntitlementsProgress(name: string): Promise<LROperation<protos.google.cloud.channel.v1.TransferEntitlementsResponse, protos.google.cloud.channel.v1.OperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.transferEntitlements, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.channel.v1.TransferEntitlementsResponse, protos.google.cloud.channel.v1.OperationMetadata>;
  }
  transferEntitlementsToGoogle(
      request: protos.google.cloud.channel.v1.ITransferEntitlementsToGoogleRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  transferEntitlementsToGoogle(
      request: protos.google.cloud.channel.v1.ITransferEntitlementsToGoogleRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  transferEntitlementsToGoogle(
      request: protos.google.cloud.channel.v1.ITransferEntitlementsToGoogleRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Transfers customer entitlements from their current reseller to Google.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The customer doesn't belong to the reseller.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 * * NOT_FOUND: The customer or offer resource was not found.
 * * ALREADY_EXISTS: The SKU was already transferred for the customer.
 * * CONDITION_NOT_MET or FAILED_PRECONDITION:
 *     * The SKU requires domain verification to transfer, but the domain is
 *     not verified.
 *     * An Add-On SKU (example, Vault or Drive) is missing the
 *     pre-requisite SKU (example, G Suite Basic).
 *     * (Developer accounts only) Reseller and resold domain must meet the
 *     following naming requirements:
 *         * Domain names must start with goog-test.
 *         * Domain names must include the reseller domain.
 * * INTERNAL: Any non-user error related to a technical issue in the
 * backend. Contact Cloud Channel support.
 * * UNKNOWN: Any non-user error related to a technical issue in the backend.
 * Contact Cloud Channel support.
 *
 * Return value:
 * The ID of a long-running operation.
 *
 * To get the results of the operation, call the GetOperation method of
 * CloudChannelOperationsService. The response will contain
 * google.protobuf.Empty on success. The Operation metadata will contain an
 * instance of {@link google.cloud.channel.v1.OperationMetadata|OperationMetadata}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the reseller's customer account where the entitlements
 *   transfer from.
 *   Parent uses the format: accounts/{account_id}/customers/{customer_id}
 * @param {number[]} request.entitlements
 *   Required. The entitlements to transfer to Google.
 * @param {string} [request.requestId]
 *   Optional. You can specify an optional unique request ID, and if you need to retry
 *   your request, the server will know to ignore the request if it's complete.
 *
 *   For example, you make an initial request and the request times out. If you
 *   make the request again with the same request ID, the server can check if
 *   it received the original operation with the same request ID. If it did, it
 *   will ignore the second request.
 *
 *   The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122)
 *   with the exception that zero UUID is not supported
 *   (`00000000-0000-0000-0000-000000000000`).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.transferEntitlementsToGoogle(request);
 * const [response] = await operation.promise();
 */
  transferEntitlementsToGoogle(
      request: protos.google.cloud.channel.v1.ITransferEntitlementsToGoogleRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.channel.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.channel.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.transferEntitlementsToGoogle(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `transferEntitlementsToGoogle()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkTransferEntitlementsToGoogleProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkTransferEntitlementsToGoogleProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.channel.v1.OperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.transferEntitlementsToGoogle, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.channel.v1.OperationMetadata>;
  }
  listCustomers(
      request: protos.google.cloud.channel.v1.IListCustomersRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.channel.v1.ICustomer[],
        protos.google.cloud.channel.v1.IListCustomersRequest|null,
        protos.google.cloud.channel.v1.IListCustomersResponse
      ]>;
  listCustomers(
      request: protos.google.cloud.channel.v1.IListCustomersRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListCustomersRequest,
          protos.google.cloud.channel.v1.IListCustomersResponse|null|undefined,
          protos.google.cloud.channel.v1.ICustomer>): void;
  listCustomers(
      request: protos.google.cloud.channel.v1.IListCustomersRequest,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListCustomersRequest,
          protos.google.cloud.channel.v1.IListCustomersResponse|null|undefined,
          protos.google.cloud.channel.v1.ICustomer>): void;
/**
 * List {@link google.cloud.channel.v1.Customer|Customer}s.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The reseller account making the request is different
 * from the reseller account in the API request.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 *
 * Return value:
 * List of {@link google.cloud.channel.v1.Customer|Customer}s, or an empty list if there are no customers.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the reseller account to list customers from.
 *   Parent uses the format: accounts/{account_id}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of customers to return. The service may return fewer
 *   than this value. If unspecified, returns at most 10 customers. The
 *   maximum value is 50.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results other than the first page.
 *   Obtained through
 *   {@link google.cloud.channel.v1.ListCustomersResponse.next_page_token|ListCustomersResponse.next_page_token} of the previous
 *   {@link google.cloud.channel.v1.CloudChannelService.ListCustomers|CloudChannelService.ListCustomers} call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Customer]{@link google.cloud.channel.v1.Customer}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listCustomersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listCustomers(
      request: protos.google.cloud.channel.v1.IListCustomersRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.channel.v1.IListCustomersRequest,
          protos.google.cloud.channel.v1.IListCustomersResponse|null|undefined,
          protos.google.cloud.channel.v1.ICustomer>,
      callback?: PaginationCallback<
          protos.google.cloud.channel.v1.IListCustomersRequest,
          protos.google.cloud.channel.v1.IListCustomersResponse|null|undefined,
          protos.google.cloud.channel.v1.ICustomer>):
      Promise<[
        protos.google.cloud.channel.v1.ICustomer[],
        protos.google.cloud.channel.v1.IListCustomersRequest|null,
        protos.google.cloud.channel.v1.IListCustomersResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listCustomers(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the reseller account to list customers from.
 *   Parent uses the format: accounts/{account_id}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of customers to return. The service may return fewer
 *   than this value. If unspecified, returns at most 10 customers. The
 *   maximum value is 50.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results other than the first page.
 *   Obtained through
 *   {@link google.cloud.channel.v1.ListCustomersResponse.next_page_token|ListCustomersResponse.next_page_token} of the previous
 *   {@link google.cloud.channel.v1.CloudChannelService.ListCustomers|CloudChannelService.ListCustomers} call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Customer]{@link google.cloud.channel.v1.Customer} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listCustomersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listCustomersStream(
      request?: protos.google.cloud.channel.v1.IListCustomersRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listCustomers.createStream(
      this.innerApiCalls.listCustomers as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listCustomers`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the reseller account to list customers from.
 *   Parent uses the format: accounts/{account_id}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of customers to return. The service may return fewer
 *   than this value. If unspecified, returns at most 10 customers. The
 *   maximum value is 50.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results other than the first page.
 *   Obtained through
 *   {@link google.cloud.channel.v1.ListCustomersResponse.next_page_token|ListCustomersResponse.next_page_token} of the previous
 *   {@link google.cloud.channel.v1.CloudChannelService.ListCustomers|CloudChannelService.ListCustomers} call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Customer]{@link google.cloud.channel.v1.Customer}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listCustomersAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listCustomersAsync(
      request?: protos.google.cloud.channel.v1.IListCustomersRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.channel.v1.ICustomer>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listCustomers.asyncIterate(
      this.innerApiCalls['listCustomers'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.channel.v1.ICustomer>;
  }
  listEntitlements(
      request: protos.google.cloud.channel.v1.IListEntitlementsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.channel.v1.IEntitlement[],
        protos.google.cloud.channel.v1.IListEntitlementsRequest|null,
        protos.google.cloud.channel.v1.IListEntitlementsResponse
      ]>;
  listEntitlements(
      request: protos.google.cloud.channel.v1.IListEntitlementsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListEntitlementsRequest,
          protos.google.cloud.channel.v1.IListEntitlementsResponse|null|undefined,
          protos.google.cloud.channel.v1.IEntitlement>): void;
  listEntitlements(
      request: protos.google.cloud.channel.v1.IListEntitlementsRequest,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListEntitlementsRequest,
          protos.google.cloud.channel.v1.IListEntitlementsResponse|null|undefined,
          protos.google.cloud.channel.v1.IEntitlement>): void;
/**
 * Lists {@link google.cloud.channel.v1.Entitlement|Entitlement}s belonging to a customer.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The customer doesn't belong to the reseller.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 *
 * Return value:
 * A list of the customer's {@link google.cloud.channel.v1.Entitlement|Entitlement}s.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the reseller's customer account to list
 *   entitlements for.
 *   Parent uses the format: accounts/{account_id}/customers/{customer_id}
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server might return fewer results than requested.
 *   If unspecified, return at most 50 entitlements.
 *   The maximum value is 100; the server will coerce values above 100.
 * @param {string} [request.pageToken]
 *   Optional. A token for a page of results other than the first page.
 *   Obtained using
 *   {@link google.cloud.channel.v1.ListEntitlementsResponse.next_page_token|ListEntitlementsResponse.next_page_token} of the previous
 *   {@link google.cloud.channel.v1.CloudChannelService.ListEntitlements|CloudChannelService.ListEntitlements} call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Entitlement]{@link google.cloud.channel.v1.Entitlement}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listEntitlementsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listEntitlements(
      request: protos.google.cloud.channel.v1.IListEntitlementsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.channel.v1.IListEntitlementsRequest,
          protos.google.cloud.channel.v1.IListEntitlementsResponse|null|undefined,
          protos.google.cloud.channel.v1.IEntitlement>,
      callback?: PaginationCallback<
          protos.google.cloud.channel.v1.IListEntitlementsRequest,
          protos.google.cloud.channel.v1.IListEntitlementsResponse|null|undefined,
          protos.google.cloud.channel.v1.IEntitlement>):
      Promise<[
        protos.google.cloud.channel.v1.IEntitlement[],
        protos.google.cloud.channel.v1.IListEntitlementsRequest|null,
        protos.google.cloud.channel.v1.IListEntitlementsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listEntitlements(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the reseller's customer account to list
 *   entitlements for.
 *   Parent uses the format: accounts/{account_id}/customers/{customer_id}
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server might return fewer results than requested.
 *   If unspecified, return at most 50 entitlements.
 *   The maximum value is 100; the server will coerce values above 100.
 * @param {string} [request.pageToken]
 *   Optional. A token for a page of results other than the first page.
 *   Obtained using
 *   {@link google.cloud.channel.v1.ListEntitlementsResponse.next_page_token|ListEntitlementsResponse.next_page_token} of the previous
 *   {@link google.cloud.channel.v1.CloudChannelService.ListEntitlements|CloudChannelService.ListEntitlements} call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Entitlement]{@link google.cloud.channel.v1.Entitlement} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listEntitlementsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listEntitlementsStream(
      request?: protos.google.cloud.channel.v1.IListEntitlementsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listEntitlements.createStream(
      this.innerApiCalls.listEntitlements as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listEntitlements`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the reseller's customer account to list
 *   entitlements for.
 *   Parent uses the format: accounts/{account_id}/customers/{customer_id}
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server might return fewer results than requested.
 *   If unspecified, return at most 50 entitlements.
 *   The maximum value is 100; the server will coerce values above 100.
 * @param {string} [request.pageToken]
 *   Optional. A token for a page of results other than the first page.
 *   Obtained using
 *   {@link google.cloud.channel.v1.ListEntitlementsResponse.next_page_token|ListEntitlementsResponse.next_page_token} of the previous
 *   {@link google.cloud.channel.v1.CloudChannelService.ListEntitlements|CloudChannelService.ListEntitlements} call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Entitlement]{@link google.cloud.channel.v1.Entitlement}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listEntitlementsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listEntitlementsAsync(
      request?: protos.google.cloud.channel.v1.IListEntitlementsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.channel.v1.IEntitlement>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listEntitlements.asyncIterate(
      this.innerApiCalls['listEntitlements'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.channel.v1.IEntitlement>;
  }
  listTransferableSkus(
      request: protos.google.cloud.channel.v1.IListTransferableSkusRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.channel.v1.ITransferableSku[],
        protos.google.cloud.channel.v1.IListTransferableSkusRequest|null,
        protos.google.cloud.channel.v1.IListTransferableSkusResponse
      ]>;
  listTransferableSkus(
      request: protos.google.cloud.channel.v1.IListTransferableSkusRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListTransferableSkusRequest,
          protos.google.cloud.channel.v1.IListTransferableSkusResponse|null|undefined,
          protos.google.cloud.channel.v1.ITransferableSku>): void;
  listTransferableSkus(
      request: protos.google.cloud.channel.v1.IListTransferableSkusRequest,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListTransferableSkusRequest,
          protos.google.cloud.channel.v1.IListTransferableSkusResponse|null|undefined,
          protos.google.cloud.channel.v1.ITransferableSku>): void;
/**
 * List {@link google.cloud.channel.v1.TransferableSku|TransferableSku}s of a customer based on the Cloud Identity ID or
 * Customer Name in the request.
 *
 * Use this method to list the entitlements information of an
 * unowned customer. You should provide the customer's
 * Cloud Identity ID or Customer Name.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED:
 *     * The customer doesn't belong to the reseller and has no auth token.
 *     * The supplied auth token is invalid.
 *     * The reseller account making the request is different
 *     from the reseller account in the query.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 *
 * Return value:
 * A list of the customer's {@link google.cloud.channel.v1.TransferableSku|TransferableSku}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.cloudIdentityId
 *   Customer's Cloud Identity ID
 * @param {string} request.customerName
 *   A reseller is required to create a customer and use the resource name of
 *   the created customer here.
 *   Customer_name uses the format:
 *   accounts/{account_id}/customers/{customer_id}
 * @param {string} request.parent
 *   Required. The reseller account's resource name.
 *   Parent uses the format: accounts/{account_id}
 * @param {number} request.pageSize
 *   The requested page size. Server might return fewer results than requested.
 *   If unspecified, returns at most 100 SKUs.
 *   The maximum value is 1000; the server will coerce values above 1000.
 *   Optional.
 * @param {string} request.pageToken
 *   A token for a page of results other than the first page.
 *   Obtained using
 *   {@link google.cloud.channel.v1.ListTransferableSkusResponse.next_page_token|ListTransferableSkusResponse.next_page_token} of the previous
 *   {@link google.cloud.channel.v1.CloudChannelService.ListTransferableSkus|CloudChannelService.ListTransferableSkus} call.
 *   Optional.
 * @param {string} request.authToken
 *   The super admin of the resold customer generates this token to
 *   authorize a reseller to access their Cloud Identity and purchase
 *   entitlements on their behalf. You can omit this token after authorization.
 *   See https://support.google.com/a/answer/7643790 for more details.
 * @param {string} request.languageCode
 *   The BCP-47 language code. For example, "en-US". The
 *   response will localize in the corresponding language code, if specified.
 *   The default value is "en-US".
 *   Optional.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [TransferableSku]{@link google.cloud.channel.v1.TransferableSku}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listTransferableSkusAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listTransferableSkus(
      request: protos.google.cloud.channel.v1.IListTransferableSkusRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.channel.v1.IListTransferableSkusRequest,
          protos.google.cloud.channel.v1.IListTransferableSkusResponse|null|undefined,
          protos.google.cloud.channel.v1.ITransferableSku>,
      callback?: PaginationCallback<
          protos.google.cloud.channel.v1.IListTransferableSkusRequest,
          protos.google.cloud.channel.v1.IListTransferableSkusResponse|null|undefined,
          protos.google.cloud.channel.v1.ITransferableSku>):
      Promise<[
        protos.google.cloud.channel.v1.ITransferableSku[],
        protos.google.cloud.channel.v1.IListTransferableSkusRequest|null,
        protos.google.cloud.channel.v1.IListTransferableSkusResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listTransferableSkus(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.cloudIdentityId
 *   Customer's Cloud Identity ID
 * @param {string} request.customerName
 *   A reseller is required to create a customer and use the resource name of
 *   the created customer here.
 *   Customer_name uses the format:
 *   accounts/{account_id}/customers/{customer_id}
 * @param {string} request.parent
 *   Required. The reseller account's resource name.
 *   Parent uses the format: accounts/{account_id}
 * @param {number} request.pageSize
 *   The requested page size. Server might return fewer results than requested.
 *   If unspecified, returns at most 100 SKUs.
 *   The maximum value is 1000; the server will coerce values above 1000.
 *   Optional.
 * @param {string} request.pageToken
 *   A token for a page of results other than the first page.
 *   Obtained using
 *   {@link google.cloud.channel.v1.ListTransferableSkusResponse.next_page_token|ListTransferableSkusResponse.next_page_token} of the previous
 *   {@link google.cloud.channel.v1.CloudChannelService.ListTransferableSkus|CloudChannelService.ListTransferableSkus} call.
 *   Optional.
 * @param {string} request.authToken
 *   The super admin of the resold customer generates this token to
 *   authorize a reseller to access their Cloud Identity and purchase
 *   entitlements on their behalf. You can omit this token after authorization.
 *   See https://support.google.com/a/answer/7643790 for more details.
 * @param {string} request.languageCode
 *   The BCP-47 language code. For example, "en-US". The
 *   response will localize in the corresponding language code, if specified.
 *   The default value is "en-US".
 *   Optional.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [TransferableSku]{@link google.cloud.channel.v1.TransferableSku} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listTransferableSkusAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listTransferableSkusStream(
      request?: protos.google.cloud.channel.v1.IListTransferableSkusRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listTransferableSkus.createStream(
      this.innerApiCalls.listTransferableSkus as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listTransferableSkus`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.cloudIdentityId
 *   Customer's Cloud Identity ID
 * @param {string} request.customerName
 *   A reseller is required to create a customer and use the resource name of
 *   the created customer here.
 *   Customer_name uses the format:
 *   accounts/{account_id}/customers/{customer_id}
 * @param {string} request.parent
 *   Required. The reseller account's resource name.
 *   Parent uses the format: accounts/{account_id}
 * @param {number} request.pageSize
 *   The requested page size. Server might return fewer results than requested.
 *   If unspecified, returns at most 100 SKUs.
 *   The maximum value is 1000; the server will coerce values above 1000.
 *   Optional.
 * @param {string} request.pageToken
 *   A token for a page of results other than the first page.
 *   Obtained using
 *   {@link google.cloud.channel.v1.ListTransferableSkusResponse.next_page_token|ListTransferableSkusResponse.next_page_token} of the previous
 *   {@link google.cloud.channel.v1.CloudChannelService.ListTransferableSkus|CloudChannelService.ListTransferableSkus} call.
 *   Optional.
 * @param {string} request.authToken
 *   The super admin of the resold customer generates this token to
 *   authorize a reseller to access their Cloud Identity and purchase
 *   entitlements on their behalf. You can omit this token after authorization.
 *   See https://support.google.com/a/answer/7643790 for more details.
 * @param {string} request.languageCode
 *   The BCP-47 language code. For example, "en-US". The
 *   response will localize in the corresponding language code, if specified.
 *   The default value is "en-US".
 *   Optional.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [TransferableSku]{@link google.cloud.channel.v1.TransferableSku}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listTransferableSkusAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listTransferableSkusAsync(
      request?: protos.google.cloud.channel.v1.IListTransferableSkusRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.channel.v1.ITransferableSku>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listTransferableSkus.asyncIterate(
      this.innerApiCalls['listTransferableSkus'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.channel.v1.ITransferableSku>;
  }
  listTransferableOffers(
      request: protos.google.cloud.channel.v1.IListTransferableOffersRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.channel.v1.ITransferableOffer[],
        protos.google.cloud.channel.v1.IListTransferableOffersRequest|null,
        protos.google.cloud.channel.v1.IListTransferableOffersResponse
      ]>;
  listTransferableOffers(
      request: protos.google.cloud.channel.v1.IListTransferableOffersRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListTransferableOffersRequest,
          protos.google.cloud.channel.v1.IListTransferableOffersResponse|null|undefined,
          protos.google.cloud.channel.v1.ITransferableOffer>): void;
  listTransferableOffers(
      request: protos.google.cloud.channel.v1.IListTransferableOffersRequest,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListTransferableOffersRequest,
          protos.google.cloud.channel.v1.IListTransferableOffersResponse|null|undefined,
          protos.google.cloud.channel.v1.ITransferableOffer>): void;
/**
 * List {@link google.cloud.channel.v1.TransferableOffer|TransferableOffer}s of a customer based on Cloud Identity ID or
 * Customer Name in the request.
 *
 * Use this method when a reseller gets the entitlement information of an
 * unowned customer. The reseller should provide the customer's
 * Cloud Identity ID or Customer Name.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED:
 *     * The customer doesn't belong to the reseller and has no auth token.
 *     * The supplied auth token is invalid.
 *     * The reseller account making the request is different
 *     from the reseller account in the query.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 *
 * Return value:
 * List of {@link google.cloud.channel.v1.TransferableOffer|TransferableOffer} for the given customer and SKU.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.cloudIdentityId
 *   Customer's Cloud Identity ID
 * @param {string} request.customerName
 *   A reseller should create a customer and use the resource name of
 *   that customer here.
 * @param {string} request.parent
 *   Required. The resource name of the reseller's account.
 * @param {number} request.pageSize
 *   Requested page size. Server might return fewer results than requested.
 *   If unspecified, returns at most 100 offers.
 *   The maximum value is 1000; the server will coerce values above 1000.
 * @param {string} request.pageToken
 *   A token for a page of results other than the first page.
 *   Obtained using
 *   {@link google.cloud.channel.v1.ListTransferableOffersResponse.next_page_token|ListTransferableOffersResponse.next_page_token} of the previous
 *   {@link google.cloud.channel.v1.CloudChannelService.ListTransferableOffers|CloudChannelService.ListTransferableOffers} call.
 * @param {string} request.sku
 *   Required. The SKU to look up Offers for.
 * @param {string} request.languageCode
 *   The BCP-47 language code. For example, "en-US". The
 *   response will localize in the corresponding language code, if specified.
 *   The default value is "en-US".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [TransferableOffer]{@link google.cloud.channel.v1.TransferableOffer}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listTransferableOffersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listTransferableOffers(
      request: protos.google.cloud.channel.v1.IListTransferableOffersRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.channel.v1.IListTransferableOffersRequest,
          protos.google.cloud.channel.v1.IListTransferableOffersResponse|null|undefined,
          protos.google.cloud.channel.v1.ITransferableOffer>,
      callback?: PaginationCallback<
          protos.google.cloud.channel.v1.IListTransferableOffersRequest,
          protos.google.cloud.channel.v1.IListTransferableOffersResponse|null|undefined,
          protos.google.cloud.channel.v1.ITransferableOffer>):
      Promise<[
        protos.google.cloud.channel.v1.ITransferableOffer[],
        protos.google.cloud.channel.v1.IListTransferableOffersRequest|null,
        protos.google.cloud.channel.v1.IListTransferableOffersResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listTransferableOffers(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.cloudIdentityId
 *   Customer's Cloud Identity ID
 * @param {string} request.customerName
 *   A reseller should create a customer and use the resource name of
 *   that customer here.
 * @param {string} request.parent
 *   Required. The resource name of the reseller's account.
 * @param {number} request.pageSize
 *   Requested page size. Server might return fewer results than requested.
 *   If unspecified, returns at most 100 offers.
 *   The maximum value is 1000; the server will coerce values above 1000.
 * @param {string} request.pageToken
 *   A token for a page of results other than the first page.
 *   Obtained using
 *   {@link google.cloud.channel.v1.ListTransferableOffersResponse.next_page_token|ListTransferableOffersResponse.next_page_token} of the previous
 *   {@link google.cloud.channel.v1.CloudChannelService.ListTransferableOffers|CloudChannelService.ListTransferableOffers} call.
 * @param {string} request.sku
 *   Required. The SKU to look up Offers for.
 * @param {string} request.languageCode
 *   The BCP-47 language code. For example, "en-US". The
 *   response will localize in the corresponding language code, if specified.
 *   The default value is "en-US".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [TransferableOffer]{@link google.cloud.channel.v1.TransferableOffer} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listTransferableOffersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listTransferableOffersStream(
      request?: protos.google.cloud.channel.v1.IListTransferableOffersRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listTransferableOffers.createStream(
      this.innerApiCalls.listTransferableOffers as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listTransferableOffers`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.cloudIdentityId
 *   Customer's Cloud Identity ID
 * @param {string} request.customerName
 *   A reseller should create a customer and use the resource name of
 *   that customer here.
 * @param {string} request.parent
 *   Required. The resource name of the reseller's account.
 * @param {number} request.pageSize
 *   Requested page size. Server might return fewer results than requested.
 *   If unspecified, returns at most 100 offers.
 *   The maximum value is 1000; the server will coerce values above 1000.
 * @param {string} request.pageToken
 *   A token for a page of results other than the first page.
 *   Obtained using
 *   {@link google.cloud.channel.v1.ListTransferableOffersResponse.next_page_token|ListTransferableOffersResponse.next_page_token} of the previous
 *   {@link google.cloud.channel.v1.CloudChannelService.ListTransferableOffers|CloudChannelService.ListTransferableOffers} call.
 * @param {string} request.sku
 *   Required. The SKU to look up Offers for.
 * @param {string} request.languageCode
 *   The BCP-47 language code. For example, "en-US". The
 *   response will localize in the corresponding language code, if specified.
 *   The default value is "en-US".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [TransferableOffer]{@link google.cloud.channel.v1.TransferableOffer}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listTransferableOffersAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listTransferableOffersAsync(
      request?: protos.google.cloud.channel.v1.IListTransferableOffersRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.channel.v1.ITransferableOffer>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listTransferableOffers.asyncIterate(
      this.innerApiCalls['listTransferableOffers'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.channel.v1.ITransferableOffer>;
  }
  listChannelPartnerLinks(
      request: protos.google.cloud.channel.v1.IListChannelPartnerLinksRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.channel.v1.IChannelPartnerLink[],
        protos.google.cloud.channel.v1.IListChannelPartnerLinksRequest|null,
        protos.google.cloud.channel.v1.IListChannelPartnerLinksResponse
      ]>;
  listChannelPartnerLinks(
      request: protos.google.cloud.channel.v1.IListChannelPartnerLinksRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListChannelPartnerLinksRequest,
          protos.google.cloud.channel.v1.IListChannelPartnerLinksResponse|null|undefined,
          protos.google.cloud.channel.v1.IChannelPartnerLink>): void;
  listChannelPartnerLinks(
      request: protos.google.cloud.channel.v1.IListChannelPartnerLinksRequest,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListChannelPartnerLinksRequest,
          protos.google.cloud.channel.v1.IListChannelPartnerLinksResponse|null|undefined,
          protos.google.cloud.channel.v1.IChannelPartnerLink>): void;
/**
 * List {@link google.cloud.channel.v1.ChannelPartnerLink|ChannelPartnerLink}s belonging to a distributor.
 * You must be a distributor to call this method.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The reseller account making the request is different
 * from the reseller account in the API request.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 *
 * Return value:
 * The list of the distributor account's {@link google.cloud.channel.v1.ChannelPartnerLink|ChannelPartnerLink} resources.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the reseller account for listing channel partner
 *   links.
 *   Parent uses the format: accounts/{account_id}
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server might return fewer results than requested.
 *   If unspecified, server will pick a default size (25).
 *   The maximum value is 200; the server will coerce values above 200.
 * @param {string} [request.pageToken]
 *   Optional. A token for a page of results other than the first page.
 *   Obtained using
 *   {@link google.cloud.channel.v1.ListChannelPartnerLinksResponse.next_page_token|ListChannelPartnerLinksResponse.next_page_token} of the previous
 *   {@link google.cloud.channel.v1.CloudChannelService.ListChannelPartnerLinks|CloudChannelService.ListChannelPartnerLinks} call.
 * @param {google.cloud.channel.v1.ChannelPartnerLinkView} [request.view]
 *   Optional. The level of granularity the ChannelPartnerLink will display.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [ChannelPartnerLink]{@link google.cloud.channel.v1.ChannelPartnerLink}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listChannelPartnerLinksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listChannelPartnerLinks(
      request: protos.google.cloud.channel.v1.IListChannelPartnerLinksRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.channel.v1.IListChannelPartnerLinksRequest,
          protos.google.cloud.channel.v1.IListChannelPartnerLinksResponse|null|undefined,
          protos.google.cloud.channel.v1.IChannelPartnerLink>,
      callback?: PaginationCallback<
          protos.google.cloud.channel.v1.IListChannelPartnerLinksRequest,
          protos.google.cloud.channel.v1.IListChannelPartnerLinksResponse|null|undefined,
          protos.google.cloud.channel.v1.IChannelPartnerLink>):
      Promise<[
        protos.google.cloud.channel.v1.IChannelPartnerLink[],
        protos.google.cloud.channel.v1.IListChannelPartnerLinksRequest|null,
        protos.google.cloud.channel.v1.IListChannelPartnerLinksResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listChannelPartnerLinks(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the reseller account for listing channel partner
 *   links.
 *   Parent uses the format: accounts/{account_id}
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server might return fewer results than requested.
 *   If unspecified, server will pick a default size (25).
 *   The maximum value is 200; the server will coerce values above 200.
 * @param {string} [request.pageToken]
 *   Optional. A token for a page of results other than the first page.
 *   Obtained using
 *   {@link google.cloud.channel.v1.ListChannelPartnerLinksResponse.next_page_token|ListChannelPartnerLinksResponse.next_page_token} of the previous
 *   {@link google.cloud.channel.v1.CloudChannelService.ListChannelPartnerLinks|CloudChannelService.ListChannelPartnerLinks} call.
 * @param {google.cloud.channel.v1.ChannelPartnerLinkView} [request.view]
 *   Optional. The level of granularity the ChannelPartnerLink will display.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [ChannelPartnerLink]{@link google.cloud.channel.v1.ChannelPartnerLink} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listChannelPartnerLinksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listChannelPartnerLinksStream(
      request?: protos.google.cloud.channel.v1.IListChannelPartnerLinksRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listChannelPartnerLinks.createStream(
      this.innerApiCalls.listChannelPartnerLinks as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listChannelPartnerLinks`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the reseller account for listing channel partner
 *   links.
 *   Parent uses the format: accounts/{account_id}
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server might return fewer results than requested.
 *   If unspecified, server will pick a default size (25).
 *   The maximum value is 200; the server will coerce values above 200.
 * @param {string} [request.pageToken]
 *   Optional. A token for a page of results other than the first page.
 *   Obtained using
 *   {@link google.cloud.channel.v1.ListChannelPartnerLinksResponse.next_page_token|ListChannelPartnerLinksResponse.next_page_token} of the previous
 *   {@link google.cloud.channel.v1.CloudChannelService.ListChannelPartnerLinks|CloudChannelService.ListChannelPartnerLinks} call.
 * @param {google.cloud.channel.v1.ChannelPartnerLinkView} [request.view]
 *   Optional. The level of granularity the ChannelPartnerLink will display.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [ChannelPartnerLink]{@link google.cloud.channel.v1.ChannelPartnerLink}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listChannelPartnerLinksAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listChannelPartnerLinksAsync(
      request?: protos.google.cloud.channel.v1.IListChannelPartnerLinksRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.channel.v1.IChannelPartnerLink>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listChannelPartnerLinks.asyncIterate(
      this.innerApiCalls['listChannelPartnerLinks'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.channel.v1.IChannelPartnerLink>;
  }
  listProducts(
      request: protos.google.cloud.channel.v1.IListProductsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.channel.v1.IProduct[],
        protos.google.cloud.channel.v1.IListProductsRequest|null,
        protos.google.cloud.channel.v1.IListProductsResponse
      ]>;
  listProducts(
      request: protos.google.cloud.channel.v1.IListProductsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListProductsRequest,
          protos.google.cloud.channel.v1.IListProductsResponse|null|undefined,
          protos.google.cloud.channel.v1.IProduct>): void;
  listProducts(
      request: protos.google.cloud.channel.v1.IListProductsRequest,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListProductsRequest,
          protos.google.cloud.channel.v1.IListProductsResponse|null|undefined,
          protos.google.cloud.channel.v1.IProduct>): void;
/**
 * Lists the Products the reseller is authorized to sell.
 *
 * Possible error codes:
 *
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.account
 *   Required. The resource name of the reseller account.
 *   Format: accounts/{account_id}.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server might return fewer results than requested.
 *   If unspecified, returns at most 100 Products.
 *   The maximum value is 1000; the server will coerce values above 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token for a page of results other than the first page.
 * @param {string} [request.languageCode]
 *   Optional. The BCP-47 language code. For example, "en-US". The
 *   response will localize in the corresponding language code, if specified.
 *   The default value is "en-US".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Product]{@link google.cloud.channel.v1.Product}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listProductsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listProducts(
      request: protos.google.cloud.channel.v1.IListProductsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.channel.v1.IListProductsRequest,
          protos.google.cloud.channel.v1.IListProductsResponse|null|undefined,
          protos.google.cloud.channel.v1.IProduct>,
      callback?: PaginationCallback<
          protos.google.cloud.channel.v1.IListProductsRequest,
          protos.google.cloud.channel.v1.IListProductsResponse|null|undefined,
          protos.google.cloud.channel.v1.IProduct>):
      Promise<[
        protos.google.cloud.channel.v1.IProduct[],
        protos.google.cloud.channel.v1.IListProductsRequest|null,
        protos.google.cloud.channel.v1.IListProductsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.listProducts(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.account
 *   Required. The resource name of the reseller account.
 *   Format: accounts/{account_id}.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server might return fewer results than requested.
 *   If unspecified, returns at most 100 Products.
 *   The maximum value is 1000; the server will coerce values above 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token for a page of results other than the first page.
 * @param {string} [request.languageCode]
 *   Optional. The BCP-47 language code. For example, "en-US". The
 *   response will localize in the corresponding language code, if specified.
 *   The default value is "en-US".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Product]{@link google.cloud.channel.v1.Product} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listProductsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listProductsStream(
      request?: protos.google.cloud.channel.v1.IListProductsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listProducts.createStream(
      this.innerApiCalls.listProducts as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listProducts`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.account
 *   Required. The resource name of the reseller account.
 *   Format: accounts/{account_id}.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server might return fewer results than requested.
 *   If unspecified, returns at most 100 Products.
 *   The maximum value is 1000; the server will coerce values above 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token for a page of results other than the first page.
 * @param {string} [request.languageCode]
 *   Optional. The BCP-47 language code. For example, "en-US". The
 *   response will localize in the corresponding language code, if specified.
 *   The default value is "en-US".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Product]{@link google.cloud.channel.v1.Product}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listProductsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listProductsAsync(
      request?: protos.google.cloud.channel.v1.IListProductsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.channel.v1.IProduct>{
    request = request || {};
    options = options || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listProducts.asyncIterate(
      this.innerApiCalls['listProducts'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.channel.v1.IProduct>;
  }
  listSkus(
      request: protos.google.cloud.channel.v1.IListSkusRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.channel.v1.ISku[],
        protos.google.cloud.channel.v1.IListSkusRequest|null,
        protos.google.cloud.channel.v1.IListSkusResponse
      ]>;
  listSkus(
      request: protos.google.cloud.channel.v1.IListSkusRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListSkusRequest,
          protos.google.cloud.channel.v1.IListSkusResponse|null|undefined,
          protos.google.cloud.channel.v1.ISku>): void;
  listSkus(
      request: protos.google.cloud.channel.v1.IListSkusRequest,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListSkusRequest,
          protos.google.cloud.channel.v1.IListSkusResponse|null|undefined,
          protos.google.cloud.channel.v1.ISku>): void;
/**
 * Lists the SKUs for a product the reseller is authorized to sell.
 *
 * Possible error codes:
 *
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Product to list SKUs for.
 *   Parent uses the format: products/{product_id}.
 *   Supports products/- to retrieve SKUs for all products.
 * @param {string} request.account
 *   Required. Resource name of the reseller.
 *   Format: accounts/{account_id}.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server might return fewer results than requested.
 *   If unspecified, returns at most 100 SKUs.
 *   The maximum value is 1000; the server will coerce values above 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token for a page of results other than the first page.
 *   Optional.
 * @param {string} [request.languageCode]
 *   Optional. The BCP-47 language code. For example, "en-US". The
 *   response will localize in the corresponding language code, if specified.
 *   The default value is "en-US".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Sku]{@link google.cloud.channel.v1.Sku}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listSkusAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listSkus(
      request: protos.google.cloud.channel.v1.IListSkusRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.channel.v1.IListSkusRequest,
          protos.google.cloud.channel.v1.IListSkusResponse|null|undefined,
          protos.google.cloud.channel.v1.ISku>,
      callback?: PaginationCallback<
          protos.google.cloud.channel.v1.IListSkusRequest,
          protos.google.cloud.channel.v1.IListSkusResponse|null|undefined,
          protos.google.cloud.channel.v1.ISku>):
      Promise<[
        protos.google.cloud.channel.v1.ISku[],
        protos.google.cloud.channel.v1.IListSkusRequest|null,
        protos.google.cloud.channel.v1.IListSkusResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listSkus(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Product to list SKUs for.
 *   Parent uses the format: products/{product_id}.
 *   Supports products/- to retrieve SKUs for all products.
 * @param {string} request.account
 *   Required. Resource name of the reseller.
 *   Format: accounts/{account_id}.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server might return fewer results than requested.
 *   If unspecified, returns at most 100 SKUs.
 *   The maximum value is 1000; the server will coerce values above 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token for a page of results other than the first page.
 *   Optional.
 * @param {string} [request.languageCode]
 *   Optional. The BCP-47 language code. For example, "en-US". The
 *   response will localize in the corresponding language code, if specified.
 *   The default value is "en-US".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Sku]{@link google.cloud.channel.v1.Sku} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listSkusAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listSkusStream(
      request?: protos.google.cloud.channel.v1.IListSkusRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listSkus.createStream(
      this.innerApiCalls.listSkus as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listSkus`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Product to list SKUs for.
 *   Parent uses the format: products/{product_id}.
 *   Supports products/- to retrieve SKUs for all products.
 * @param {string} request.account
 *   Required. Resource name of the reseller.
 *   Format: accounts/{account_id}.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server might return fewer results than requested.
 *   If unspecified, returns at most 100 SKUs.
 *   The maximum value is 1000; the server will coerce values above 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token for a page of results other than the first page.
 *   Optional.
 * @param {string} [request.languageCode]
 *   Optional. The BCP-47 language code. For example, "en-US". The
 *   response will localize in the corresponding language code, if specified.
 *   The default value is "en-US".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Sku]{@link google.cloud.channel.v1.Sku}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listSkusAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listSkusAsync(
      request?: protos.google.cloud.channel.v1.IListSkusRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.channel.v1.ISku>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listSkus.asyncIterate(
      this.innerApiCalls['listSkus'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.channel.v1.ISku>;
  }
  listOffers(
      request: protos.google.cloud.channel.v1.IListOffersRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.channel.v1.IOffer[],
        protos.google.cloud.channel.v1.IListOffersRequest|null,
        protos.google.cloud.channel.v1.IListOffersResponse
      ]>;
  listOffers(
      request: protos.google.cloud.channel.v1.IListOffersRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListOffersRequest,
          protos.google.cloud.channel.v1.IListOffersResponse|null|undefined,
          protos.google.cloud.channel.v1.IOffer>): void;
  listOffers(
      request: protos.google.cloud.channel.v1.IListOffersRequest,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListOffersRequest,
          protos.google.cloud.channel.v1.IListOffersResponse|null|undefined,
          protos.google.cloud.channel.v1.IOffer>): void;
/**
 * Lists the Offers the reseller can sell.
 *
 * Possible error codes:
 *
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the reseller account from which to list Offers.
 *   Parent uses the format: accounts/{account_id}.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server might return fewer results than requested.
 *   If unspecified, returns at most 500 Offers.
 *   The maximum value is 1000; the server will coerce values above 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token for a page of results other than the first page.
 * @param {string} [request.filter]
 *   Optional. The expression to filter results by name (name of
 *   the Offer), sku.name (name of the SKU), or sku.product.name (name of the
 *   Product).
 *   Example 1: sku.product.name=products/p1 AND sku.name!=products/p1/skus/s1
 *   Example 2: name=accounts/a1/offers/o1
 * @param {string} [request.languageCode]
 *   Optional. The BCP-47 language code. For example, "en-US". The
 *   response will localize in the corresponding language code, if specified.
 *   The default value is "en-US".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Offer]{@link google.cloud.channel.v1.Offer}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listOffersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listOffers(
      request: protos.google.cloud.channel.v1.IListOffersRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.channel.v1.IListOffersRequest,
          protos.google.cloud.channel.v1.IListOffersResponse|null|undefined,
          protos.google.cloud.channel.v1.IOffer>,
      callback?: PaginationCallback<
          protos.google.cloud.channel.v1.IListOffersRequest,
          protos.google.cloud.channel.v1.IListOffersResponse|null|undefined,
          protos.google.cloud.channel.v1.IOffer>):
      Promise<[
        protos.google.cloud.channel.v1.IOffer[],
        protos.google.cloud.channel.v1.IListOffersRequest|null,
        protos.google.cloud.channel.v1.IListOffersResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listOffers(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the reseller account from which to list Offers.
 *   Parent uses the format: accounts/{account_id}.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server might return fewer results than requested.
 *   If unspecified, returns at most 500 Offers.
 *   The maximum value is 1000; the server will coerce values above 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token for a page of results other than the first page.
 * @param {string} [request.filter]
 *   Optional. The expression to filter results by name (name of
 *   the Offer), sku.name (name of the SKU), or sku.product.name (name of the
 *   Product).
 *   Example 1: sku.product.name=products/p1 AND sku.name!=products/p1/skus/s1
 *   Example 2: name=accounts/a1/offers/o1
 * @param {string} [request.languageCode]
 *   Optional. The BCP-47 language code. For example, "en-US". The
 *   response will localize in the corresponding language code, if specified.
 *   The default value is "en-US".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Offer]{@link google.cloud.channel.v1.Offer} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listOffersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listOffersStream(
      request?: protos.google.cloud.channel.v1.IListOffersRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listOffers.createStream(
      this.innerApiCalls.listOffers as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listOffers`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the reseller account from which to list Offers.
 *   Parent uses the format: accounts/{account_id}.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server might return fewer results than requested.
 *   If unspecified, returns at most 500 Offers.
 *   The maximum value is 1000; the server will coerce values above 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token for a page of results other than the first page.
 * @param {string} [request.filter]
 *   Optional. The expression to filter results by name (name of
 *   the Offer), sku.name (name of the SKU), or sku.product.name (name of the
 *   Product).
 *   Example 1: sku.product.name=products/p1 AND sku.name!=products/p1/skus/s1
 *   Example 2: name=accounts/a1/offers/o1
 * @param {string} [request.languageCode]
 *   Optional. The BCP-47 language code. For example, "en-US". The
 *   response will localize in the corresponding language code, if specified.
 *   The default value is "en-US".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Offer]{@link google.cloud.channel.v1.Offer}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listOffersAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listOffersAsync(
      request?: protos.google.cloud.channel.v1.IListOffersRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.channel.v1.IOffer>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listOffers.asyncIterate(
      this.innerApiCalls['listOffers'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.channel.v1.IOffer>;
  }
  listPurchasableSkus(
      request: protos.google.cloud.channel.v1.IListPurchasableSkusRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.channel.v1.IPurchasableSku[],
        protos.google.cloud.channel.v1.IListPurchasableSkusRequest|null,
        protos.google.cloud.channel.v1.IListPurchasableSkusResponse
      ]>;
  listPurchasableSkus(
      request: protos.google.cloud.channel.v1.IListPurchasableSkusRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListPurchasableSkusRequest,
          protos.google.cloud.channel.v1.IListPurchasableSkusResponse|null|undefined,
          protos.google.cloud.channel.v1.IPurchasableSku>): void;
  listPurchasableSkus(
      request: protos.google.cloud.channel.v1.IListPurchasableSkusRequest,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListPurchasableSkusRequest,
          protos.google.cloud.channel.v1.IListPurchasableSkusResponse|null|undefined,
          protos.google.cloud.channel.v1.IPurchasableSku>): void;
/**
 * Lists the following:
 *
 * * SKUs that you can purchase for a customer
 * * SKUs that you can upgrade or downgrade for an entitlement.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The customer doesn't belong to the reseller.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.channel.v1.ListPurchasableSkusRequest.CreateEntitlementPurchase} request.createEntitlementPurchase
 *   List SKUs for CreateEntitlement purchase.
 * @param {google.cloud.channel.v1.ListPurchasableSkusRequest.ChangeOfferPurchase} request.changeOfferPurchase
 *   List SKUs for ChangeOffer purchase with a new SKU.
 * @param {string} request.customer
 *   Required. The resource name of the customer to list SKUs for.
 *   Format: accounts/{account_id}/customers/{customer_id}.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server might return fewer results than requested.
 *   If unspecified, returns at most 100 SKUs.
 *   The maximum value is 1000; the server will coerce values above 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token for a page of results other than the first page.
 * @param {string} [request.languageCode]
 *   Optional. The BCP-47 language code. For example, "en-US". The
 *   response will localize in the corresponding language code, if specified.
 *   The default value is "en-US".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [PurchasableSku]{@link google.cloud.channel.v1.PurchasableSku}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listPurchasableSkusAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listPurchasableSkus(
      request: protos.google.cloud.channel.v1.IListPurchasableSkusRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.channel.v1.IListPurchasableSkusRequest,
          protos.google.cloud.channel.v1.IListPurchasableSkusResponse|null|undefined,
          protos.google.cloud.channel.v1.IPurchasableSku>,
      callback?: PaginationCallback<
          protos.google.cloud.channel.v1.IListPurchasableSkusRequest,
          protos.google.cloud.channel.v1.IListPurchasableSkusResponse|null|undefined,
          protos.google.cloud.channel.v1.IPurchasableSku>):
      Promise<[
        protos.google.cloud.channel.v1.IPurchasableSku[],
        protos.google.cloud.channel.v1.IListPurchasableSkusRequest|null,
        protos.google.cloud.channel.v1.IListPurchasableSkusResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'customer': request.customer || '',
    });
    this.initialize();
    return this.innerApiCalls.listPurchasableSkus(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.channel.v1.ListPurchasableSkusRequest.CreateEntitlementPurchase} request.createEntitlementPurchase
 *   List SKUs for CreateEntitlement purchase.
 * @param {google.cloud.channel.v1.ListPurchasableSkusRequest.ChangeOfferPurchase} request.changeOfferPurchase
 *   List SKUs for ChangeOffer purchase with a new SKU.
 * @param {string} request.customer
 *   Required. The resource name of the customer to list SKUs for.
 *   Format: accounts/{account_id}/customers/{customer_id}.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server might return fewer results than requested.
 *   If unspecified, returns at most 100 SKUs.
 *   The maximum value is 1000; the server will coerce values above 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token for a page of results other than the first page.
 * @param {string} [request.languageCode]
 *   Optional. The BCP-47 language code. For example, "en-US". The
 *   response will localize in the corresponding language code, if specified.
 *   The default value is "en-US".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [PurchasableSku]{@link google.cloud.channel.v1.PurchasableSku} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listPurchasableSkusAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listPurchasableSkusStream(
      request?: protos.google.cloud.channel.v1.IListPurchasableSkusRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'customer': request.customer || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listPurchasableSkus.createStream(
      this.innerApiCalls.listPurchasableSkus as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listPurchasableSkus`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.channel.v1.ListPurchasableSkusRequest.CreateEntitlementPurchase} request.createEntitlementPurchase
 *   List SKUs for CreateEntitlement purchase.
 * @param {google.cloud.channel.v1.ListPurchasableSkusRequest.ChangeOfferPurchase} request.changeOfferPurchase
 *   List SKUs for ChangeOffer purchase with a new SKU.
 * @param {string} request.customer
 *   Required. The resource name of the customer to list SKUs for.
 *   Format: accounts/{account_id}/customers/{customer_id}.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server might return fewer results than requested.
 *   If unspecified, returns at most 100 SKUs.
 *   The maximum value is 1000; the server will coerce values above 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token for a page of results other than the first page.
 * @param {string} [request.languageCode]
 *   Optional. The BCP-47 language code. For example, "en-US". The
 *   response will localize in the corresponding language code, if specified.
 *   The default value is "en-US".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [PurchasableSku]{@link google.cloud.channel.v1.PurchasableSku}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listPurchasableSkusAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listPurchasableSkusAsync(
      request?: protos.google.cloud.channel.v1.IListPurchasableSkusRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.channel.v1.IPurchasableSku>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'customer': request.customer || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listPurchasableSkus.asyncIterate(
      this.innerApiCalls['listPurchasableSkus'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.channel.v1.IPurchasableSku>;
  }
  listPurchasableOffers(
      request: protos.google.cloud.channel.v1.IListPurchasableOffersRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.channel.v1.IPurchasableOffer[],
        protos.google.cloud.channel.v1.IListPurchasableOffersRequest|null,
        protos.google.cloud.channel.v1.IListPurchasableOffersResponse
      ]>;
  listPurchasableOffers(
      request: protos.google.cloud.channel.v1.IListPurchasableOffersRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListPurchasableOffersRequest,
          protos.google.cloud.channel.v1.IListPurchasableOffersResponse|null|undefined,
          protos.google.cloud.channel.v1.IPurchasableOffer>): void;
  listPurchasableOffers(
      request: protos.google.cloud.channel.v1.IListPurchasableOffersRequest,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListPurchasableOffersRequest,
          protos.google.cloud.channel.v1.IListPurchasableOffersResponse|null|undefined,
          protos.google.cloud.channel.v1.IPurchasableOffer>): void;
/**
 * Lists the following:
 *
 * * Offers that you can purchase for a customer.
 * * Offers that you can change for an entitlement.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The customer doesn't belong to the reseller
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.channel.v1.ListPurchasableOffersRequest.CreateEntitlementPurchase} request.createEntitlementPurchase
 *   List Offers for CreateEntitlement purchase.
 * @param {google.cloud.channel.v1.ListPurchasableOffersRequest.ChangeOfferPurchase} request.changeOfferPurchase
 *   List Offers for ChangeOffer purchase.
 * @param {string} request.customer
 *   Required. The resource name of the customer to list Offers for.
 *   Format: accounts/{account_id}/customers/{customer_id}.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server might return fewer results than requested.
 *   If unspecified, returns at most 100 Offers.
 *   The maximum value is 1000; the server will coerce values above 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token for a page of results other than the first page.
 * @param {string} [request.languageCode]
 *   Optional. The BCP-47 language code. For example, "en-US". The
 *   response will localize in the corresponding language code, if specified.
 *   The default value is "en-US".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [PurchasableOffer]{@link google.cloud.channel.v1.PurchasableOffer}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listPurchasableOffersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listPurchasableOffers(
      request: protos.google.cloud.channel.v1.IListPurchasableOffersRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.channel.v1.IListPurchasableOffersRequest,
          protos.google.cloud.channel.v1.IListPurchasableOffersResponse|null|undefined,
          protos.google.cloud.channel.v1.IPurchasableOffer>,
      callback?: PaginationCallback<
          protos.google.cloud.channel.v1.IListPurchasableOffersRequest,
          protos.google.cloud.channel.v1.IListPurchasableOffersResponse|null|undefined,
          protos.google.cloud.channel.v1.IPurchasableOffer>):
      Promise<[
        protos.google.cloud.channel.v1.IPurchasableOffer[],
        protos.google.cloud.channel.v1.IListPurchasableOffersRequest|null,
        protos.google.cloud.channel.v1.IListPurchasableOffersResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'customer': request.customer || '',
    });
    this.initialize();
    return this.innerApiCalls.listPurchasableOffers(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.channel.v1.ListPurchasableOffersRequest.CreateEntitlementPurchase} request.createEntitlementPurchase
 *   List Offers for CreateEntitlement purchase.
 * @param {google.cloud.channel.v1.ListPurchasableOffersRequest.ChangeOfferPurchase} request.changeOfferPurchase
 *   List Offers for ChangeOffer purchase.
 * @param {string} request.customer
 *   Required. The resource name of the customer to list Offers for.
 *   Format: accounts/{account_id}/customers/{customer_id}.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server might return fewer results than requested.
 *   If unspecified, returns at most 100 Offers.
 *   The maximum value is 1000; the server will coerce values above 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token for a page of results other than the first page.
 * @param {string} [request.languageCode]
 *   Optional. The BCP-47 language code. For example, "en-US". The
 *   response will localize in the corresponding language code, if specified.
 *   The default value is "en-US".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [PurchasableOffer]{@link google.cloud.channel.v1.PurchasableOffer} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listPurchasableOffersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listPurchasableOffersStream(
      request?: protos.google.cloud.channel.v1.IListPurchasableOffersRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'customer': request.customer || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listPurchasableOffers.createStream(
      this.innerApiCalls.listPurchasableOffers as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listPurchasableOffers`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.channel.v1.ListPurchasableOffersRequest.CreateEntitlementPurchase} request.createEntitlementPurchase
 *   List Offers for CreateEntitlement purchase.
 * @param {google.cloud.channel.v1.ListPurchasableOffersRequest.ChangeOfferPurchase} request.changeOfferPurchase
 *   List Offers for ChangeOffer purchase.
 * @param {string} request.customer
 *   Required. The resource name of the customer to list Offers for.
 *   Format: accounts/{account_id}/customers/{customer_id}.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server might return fewer results than requested.
 *   If unspecified, returns at most 100 Offers.
 *   The maximum value is 1000; the server will coerce values above 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token for a page of results other than the first page.
 * @param {string} [request.languageCode]
 *   Optional. The BCP-47 language code. For example, "en-US". The
 *   response will localize in the corresponding language code, if specified.
 *   The default value is "en-US".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [PurchasableOffer]{@link google.cloud.channel.v1.PurchasableOffer}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listPurchasableOffersAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listPurchasableOffersAsync(
      request?: protos.google.cloud.channel.v1.IListPurchasableOffersRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.channel.v1.IPurchasableOffer>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'customer': request.customer || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listPurchasableOffers.asyncIterate(
      this.innerApiCalls['listPurchasableOffers'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.channel.v1.IPurchasableOffer>;
  }
  listSubscribers(
      request: protos.google.cloud.channel.v1.IListSubscribersRequest,
      options?: CallOptions):
      Promise<[
        string[],
        protos.google.cloud.channel.v1.IListSubscribersRequest|null,
        protos.google.cloud.channel.v1.IListSubscribersResponse
      ]>;
  listSubscribers(
      request: protos.google.cloud.channel.v1.IListSubscribersRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListSubscribersRequest,
          protos.google.cloud.channel.v1.IListSubscribersResponse|null|undefined,
          string>): void;
  listSubscribers(
      request: protos.google.cloud.channel.v1.IListSubscribersRequest,
      callback: PaginationCallback<
          protos.google.cloud.channel.v1.IListSubscribersRequest,
          protos.google.cloud.channel.v1.IListSubscribersResponse|null|undefined,
          string>): void;
/**
 * Lists service accounts with subscriber privileges on the Cloud Pub/Sub
 * topic created for this Channel Services account.
 *
 * Possible error codes:
 *
 * * PERMISSION_DENIED: The reseller account making the request and the
 * provided reseller account are different, or the impersonated user
 * is not a super admin.
 * * INVALID_ARGUMENT: Required request parameters are missing or invalid.
 * * NOT_FOUND: The topic resource doesn't exist.
 * * INTERNAL: Any non-user error related to a technical issue in the
 * backend. Contact Cloud Channel support.
 * * UNKNOWN: Any non-user error related to a technical issue in the backend.
 * Contact Cloud Channel support.
 *
 * Return value:
 * A list of service email addresses.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.account
 *   Required. Resource name of the account.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of service accounts to return. The service may return
 *   fewer than this value.
 *   If unspecified, returns at most 100 service accounts.
 *   The maximum value is 1000; the server will coerce values above 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListSubscribers` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListSubscribers` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of string.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listSubscribersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listSubscribers(
      request: protos.google.cloud.channel.v1.IListSubscribersRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.channel.v1.IListSubscribersRequest,
          protos.google.cloud.channel.v1.IListSubscribersResponse|null|undefined,
          string>,
      callback?: PaginationCallback<
          protos.google.cloud.channel.v1.IListSubscribersRequest,
          protos.google.cloud.channel.v1.IListSubscribersResponse|null|undefined,
          string>):
      Promise<[
        string[],
        protos.google.cloud.channel.v1.IListSubscribersRequest|null,
        protos.google.cloud.channel.v1.IListSubscribersResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'account': request.account || '',
    });
    this.initialize();
    return this.innerApiCalls.listSubscribers(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.account
 *   Required. Resource name of the account.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of service accounts to return. The service may return
 *   fewer than this value.
 *   If unspecified, returns at most 100 service accounts.
 *   The maximum value is 1000; the server will coerce values above 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListSubscribers` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListSubscribers` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing string on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listSubscribersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listSubscribersStream(
      request?: protos.google.cloud.channel.v1.IListSubscribersRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'account': request.account || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listSubscribers.createStream(
      this.innerApiCalls.listSubscribers as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listSubscribers`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.account
 *   Required. Resource name of the account.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of service accounts to return. The service may return
 *   fewer than this value.
 *   If unspecified, returns at most 100 service accounts.
 *   The maximum value is 1000; the server will coerce values above 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListSubscribers` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListSubscribers` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   string. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listSubscribersAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listSubscribersAsync(
      request?: protos.google.cloud.channel.v1.IListSubscribersRequest,
      options?: CallOptions):
    AsyncIterable<string>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'account': request.account || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listSubscribers.asyncIterate(
      this.innerApiCalls['listSubscribers'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<string>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified customer resource name string.
   *
   * @param {string} account
   * @param {string} customer
   * @returns {string} Resource name string.
   */
  customerPath(account:string,customer:string) {
    return this.pathTemplates.customerPathTemplate.render({
      account: account,
      customer: customer,
    });
  }

  /**
   * Parse the account from Customer resource.
   *
   * @param {string} customerName
   *   A fully-qualified path representing Customer resource.
   * @returns {string} A string representing the account.
   */
  matchAccountFromCustomerName(customerName: string) {
    return this.pathTemplates.customerPathTemplate.match(customerName).account;
  }

  /**
   * Parse the customer from Customer resource.
   *
   * @param {string} customerName
   *   A fully-qualified path representing Customer resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCustomerName(customerName: string) {
    return this.pathTemplates.customerPathTemplate.match(customerName).customer;
  }

  /**
   * Return a fully-qualified entitlement resource name string.
   *
   * @param {string} account
   * @param {string} customer
   * @param {string} entitlement
   * @returns {string} Resource name string.
   */
  entitlementPath(account:string,customer:string,entitlement:string) {
    return this.pathTemplates.entitlementPathTemplate.render({
      account: account,
      customer: customer,
      entitlement: entitlement,
    });
  }

  /**
   * Parse the account from Entitlement resource.
   *
   * @param {string} entitlementName
   *   A fully-qualified path representing Entitlement resource.
   * @returns {string} A string representing the account.
   */
  matchAccountFromEntitlementName(entitlementName: string) {
    return this.pathTemplates.entitlementPathTemplate.match(entitlementName).account;
  }

  /**
   * Parse the customer from Entitlement resource.
   *
   * @param {string} entitlementName
   *   A fully-qualified path representing Entitlement resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromEntitlementName(entitlementName: string) {
    return this.pathTemplates.entitlementPathTemplate.match(entitlementName).customer;
  }

  /**
   * Parse the entitlement from Entitlement resource.
   *
   * @param {string} entitlementName
   *   A fully-qualified path representing Entitlement resource.
   * @returns {string} A string representing the entitlement.
   */
  matchEntitlementFromEntitlementName(entitlementName: string) {
    return this.pathTemplates.entitlementPathTemplate.match(entitlementName).entitlement;
  }

  /**
   * Return a fully-qualified offer resource name string.
   *
   * @param {string} account
   * @param {string} offer
   * @returns {string} Resource name string.
   */
  offerPath(account:string,offer:string) {
    return this.pathTemplates.offerPathTemplate.render({
      account: account,
      offer: offer,
    });
  }

  /**
   * Parse the account from Offer resource.
   *
   * @param {string} offerName
   *   A fully-qualified path representing Offer resource.
   * @returns {string} A string representing the account.
   */
  matchAccountFromOfferName(offerName: string) {
    return this.pathTemplates.offerPathTemplate.match(offerName).account;
  }

  /**
   * Parse the offer from Offer resource.
   *
   * @param {string} offerName
   *   A fully-qualified path representing Offer resource.
   * @returns {string} A string representing the offer.
   */
  matchOfferFromOfferName(offerName: string) {
    return this.pathTemplates.offerPathTemplate.match(offerName).offer;
  }

  /**
   * Return a fully-qualified product resource name string.
   *
   * @param {string} product
   * @returns {string} Resource name string.
   */
  productPath(product:string) {
    return this.pathTemplates.productPathTemplate.render({
      product: product,
    });
  }

  /**
   * Parse the product from Product resource.
   *
   * @param {string} productName
   *   A fully-qualified path representing Product resource.
   * @returns {string} A string representing the product.
   */
  matchProductFromProductName(productName: string) {
    return this.pathTemplates.productPathTemplate.match(productName).product;
  }

  /**
   * Return a fully-qualified sku resource name string.
   *
   * @param {string} product
   * @param {string} sku
   * @returns {string} Resource name string.
   */
  skuPath(product:string,sku:string) {
    return this.pathTemplates.skuPathTemplate.render({
      product: product,
      sku: sku,
    });
  }

  /**
   * Parse the product from Sku resource.
   *
   * @param {string} skuName
   *   A fully-qualified path representing Sku resource.
   * @returns {string} A string representing the product.
   */
  matchProductFromSkuName(skuName: string) {
    return this.pathTemplates.skuPathTemplate.match(skuName).product;
  }

  /**
   * Parse the sku from Sku resource.
   *
   * @param {string} skuName
   *   A fully-qualified path representing Sku resource.
   * @returns {string} A string representing the sku.
   */
  matchSkuFromSkuName(skuName: string) {
    return this.pathTemplates.skuPathTemplate.match(skuName).sku;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.cloudChannelServiceStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
