// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as cloudchannelserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.CloudChannelServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = cloudchannelserviceModule.v1.CloudChannelServiceClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = cloudchannelserviceModule.v1.CloudChannelServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = cloudchannelserviceModule.v1.CloudChannelServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.cloudChannelServiceStub, undefined);
        await client.initialize();
        assert(client.cloudChannelServiceStub);
    });

    it('has close method', () => {
        const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getCustomer', () => {
        it('invokes getCustomer without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.GetCustomerRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.Customer());
            client.innerApiCalls.getCustomer = stubSimpleCall(expectedResponse);
            const [response] = await client.getCustomer(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getCustomer as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getCustomer without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.GetCustomerRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.Customer());
            client.innerApiCalls.getCustomer = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getCustomer(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.channel.v1.ICustomer|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getCustomer as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getCustomer with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.GetCustomerRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getCustomer = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getCustomer(request), expectedError);
            assert((client.innerApiCalls.getCustomer as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('checkCloudIdentityAccountsExist', () => {
        it('invokes checkCloudIdentityAccountsExist without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.CheckCloudIdentityAccountsExistRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.CheckCloudIdentityAccountsExistResponse());
            client.innerApiCalls.checkCloudIdentityAccountsExist = stubSimpleCall(expectedResponse);
            const [response] = await client.checkCloudIdentityAccountsExist(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.checkCloudIdentityAccountsExist as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCloudIdentityAccountsExist without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.CheckCloudIdentityAccountsExistRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.CheckCloudIdentityAccountsExistResponse());
            client.innerApiCalls.checkCloudIdentityAccountsExist = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.checkCloudIdentityAccountsExist(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.channel.v1.ICheckCloudIdentityAccountsExistResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.checkCloudIdentityAccountsExist as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes checkCloudIdentityAccountsExist with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.CheckCloudIdentityAccountsExistRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.checkCloudIdentityAccountsExist = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCloudIdentityAccountsExist(request), expectedError);
            assert((client.innerApiCalls.checkCloudIdentityAccountsExist as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createCustomer', () => {
        it('invokes createCustomer without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.CreateCustomerRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.Customer());
            client.innerApiCalls.createCustomer = stubSimpleCall(expectedResponse);
            const [response] = await client.createCustomer(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createCustomer as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createCustomer without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.CreateCustomerRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.Customer());
            client.innerApiCalls.createCustomer = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createCustomer(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.channel.v1.ICustomer|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createCustomer as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createCustomer with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.CreateCustomerRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createCustomer = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createCustomer(request), expectedError);
            assert((client.innerApiCalls.createCustomer as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateCustomer', () => {
        it('invokes updateCustomer without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.UpdateCustomerRequest());
            request.customer = {};
            request.customer.name = '';
            const expectedHeaderRequestParams = "customer.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.Customer());
            client.innerApiCalls.updateCustomer = stubSimpleCall(expectedResponse);
            const [response] = await client.updateCustomer(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCustomer as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateCustomer without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.UpdateCustomerRequest());
            request.customer = {};
            request.customer.name = '';
            const expectedHeaderRequestParams = "customer.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.Customer());
            client.innerApiCalls.updateCustomer = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateCustomer(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.channel.v1.ICustomer|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCustomer as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateCustomer with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.UpdateCustomerRequest());
            request.customer = {};
            request.customer.name = '';
            const expectedHeaderRequestParams = "customer.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateCustomer = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateCustomer(request), expectedError);
            assert((client.innerApiCalls.updateCustomer as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteCustomer', () => {
        it('invokes deleteCustomer without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.DeleteCustomerRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteCustomer = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteCustomer(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteCustomer as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteCustomer without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.DeleteCustomerRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteCustomer = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteCustomer(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteCustomer as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteCustomer with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.DeleteCustomerRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteCustomer = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteCustomer(request), expectedError);
            assert((client.innerApiCalls.deleteCustomer as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getEntitlement', () => {
        it('invokes getEntitlement without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.GetEntitlementRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement());
            client.innerApiCalls.getEntitlement = stubSimpleCall(expectedResponse);
            const [response] = await client.getEntitlement(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getEntitlement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getEntitlement without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.GetEntitlementRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement());
            client.innerApiCalls.getEntitlement = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getEntitlement(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.channel.v1.IEntitlement|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getEntitlement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getEntitlement with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.GetEntitlementRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getEntitlement = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getEntitlement(request), expectedError);
            assert((client.innerApiCalls.getEntitlement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getChannelPartnerLink', () => {
        it('invokes getChannelPartnerLink without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.GetChannelPartnerLinkRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.ChannelPartnerLink());
            client.innerApiCalls.getChannelPartnerLink = stubSimpleCall(expectedResponse);
            const [response] = await client.getChannelPartnerLink(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getChannelPartnerLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getChannelPartnerLink without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.GetChannelPartnerLinkRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.ChannelPartnerLink());
            client.innerApiCalls.getChannelPartnerLink = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getChannelPartnerLink(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.channel.v1.IChannelPartnerLink|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getChannelPartnerLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getChannelPartnerLink with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.GetChannelPartnerLinkRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getChannelPartnerLink = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getChannelPartnerLink(request), expectedError);
            assert((client.innerApiCalls.getChannelPartnerLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createChannelPartnerLink', () => {
        it('invokes createChannelPartnerLink without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.CreateChannelPartnerLinkRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.ChannelPartnerLink());
            client.innerApiCalls.createChannelPartnerLink = stubSimpleCall(expectedResponse);
            const [response] = await client.createChannelPartnerLink(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createChannelPartnerLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createChannelPartnerLink without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.CreateChannelPartnerLinkRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.ChannelPartnerLink());
            client.innerApiCalls.createChannelPartnerLink = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createChannelPartnerLink(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.channel.v1.IChannelPartnerLink|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createChannelPartnerLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createChannelPartnerLink with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.CreateChannelPartnerLinkRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createChannelPartnerLink = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createChannelPartnerLink(request), expectedError);
            assert((client.innerApiCalls.createChannelPartnerLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateChannelPartnerLink', () => {
        it('invokes updateChannelPartnerLink without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.UpdateChannelPartnerLinkRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.ChannelPartnerLink());
            client.innerApiCalls.updateChannelPartnerLink = stubSimpleCall(expectedResponse);
            const [response] = await client.updateChannelPartnerLink(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateChannelPartnerLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateChannelPartnerLink without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.UpdateChannelPartnerLinkRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.ChannelPartnerLink());
            client.innerApiCalls.updateChannelPartnerLink = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateChannelPartnerLink(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.channel.v1.IChannelPartnerLink|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateChannelPartnerLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateChannelPartnerLink with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.UpdateChannelPartnerLinkRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateChannelPartnerLink = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateChannelPartnerLink(request), expectedError);
            assert((client.innerApiCalls.updateChannelPartnerLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('lookupOffer', () => {
        it('invokes lookupOffer without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.LookupOfferRequest());
            request.entitlement = '';
            const expectedHeaderRequestParams = "entitlement=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.Offer());
            client.innerApiCalls.lookupOffer = stubSimpleCall(expectedResponse);
            const [response] = await client.lookupOffer(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.lookupOffer as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes lookupOffer without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.LookupOfferRequest());
            request.entitlement = '';
            const expectedHeaderRequestParams = "entitlement=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.Offer());
            client.innerApiCalls.lookupOffer = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.lookupOffer(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.channel.v1.IOffer|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.lookupOffer as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes lookupOffer with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.LookupOfferRequest());
            request.entitlement = '';
            const expectedHeaderRequestParams = "entitlement=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.lookupOffer = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.lookupOffer(request), expectedError);
            assert((client.innerApiCalls.lookupOffer as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('registerSubscriber', () => {
        it('invokes registerSubscriber without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.RegisterSubscriberRequest());
            request.account = '';
            const expectedHeaderRequestParams = "account=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.RegisterSubscriberResponse());
            client.innerApiCalls.registerSubscriber = stubSimpleCall(expectedResponse);
            const [response] = await client.registerSubscriber(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.registerSubscriber as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes registerSubscriber without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.RegisterSubscriberRequest());
            request.account = '';
            const expectedHeaderRequestParams = "account=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.RegisterSubscriberResponse());
            client.innerApiCalls.registerSubscriber = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.registerSubscriber(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.channel.v1.IRegisterSubscriberResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.registerSubscriber as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes registerSubscriber with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.RegisterSubscriberRequest());
            request.account = '';
            const expectedHeaderRequestParams = "account=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.registerSubscriber = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.registerSubscriber(request), expectedError);
            assert((client.innerApiCalls.registerSubscriber as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('unregisterSubscriber', () => {
        it('invokes unregisterSubscriber without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.UnregisterSubscriberRequest());
            request.account = '';
            const expectedHeaderRequestParams = "account=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.UnregisterSubscriberResponse());
            client.innerApiCalls.unregisterSubscriber = stubSimpleCall(expectedResponse);
            const [response] = await client.unregisterSubscriber(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.unregisterSubscriber as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes unregisterSubscriber without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.UnregisterSubscriberRequest());
            request.account = '';
            const expectedHeaderRequestParams = "account=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.channel.v1.UnregisterSubscriberResponse());
            client.innerApiCalls.unregisterSubscriber = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.unregisterSubscriber(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.channel.v1.IUnregisterSubscriberResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.unregisterSubscriber as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes unregisterSubscriber with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.UnregisterSubscriberRequest());
            request.account = '';
            const expectedHeaderRequestParams = "account=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.unregisterSubscriber = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.unregisterSubscriber(request), expectedError);
            assert((client.innerApiCalls.unregisterSubscriber as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('provisionCloudIdentity', () => {
        it('invokes provisionCloudIdentity without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ProvisionCloudIdentityRequest());
            request.customer = '';
            const expectedHeaderRequestParams = "customer=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.provisionCloudIdentity = stubLongRunningCall(expectedResponse);
            const [operation] = await client.provisionCloudIdentity(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.provisionCloudIdentity as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes provisionCloudIdentity without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ProvisionCloudIdentityRequest());
            request.customer = '';
            const expectedHeaderRequestParams = "customer=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.provisionCloudIdentity = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.provisionCloudIdentity(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.channel.v1.ICustomer, protos.google.cloud.channel.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.channel.v1.ICustomer, protos.google.cloud.channel.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.provisionCloudIdentity as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes provisionCloudIdentity with call error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ProvisionCloudIdentityRequest());
            request.customer = '';
            const expectedHeaderRequestParams = "customer=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.provisionCloudIdentity = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.provisionCloudIdentity(request), expectedError);
            assert((client.innerApiCalls.provisionCloudIdentity as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes provisionCloudIdentity with LRO error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ProvisionCloudIdentityRequest());
            request.customer = '';
            const expectedHeaderRequestParams = "customer=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.provisionCloudIdentity = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.provisionCloudIdentity(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.provisionCloudIdentity as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkProvisionCloudIdentityProgress without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkProvisionCloudIdentityProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkProvisionCloudIdentityProgress with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkProvisionCloudIdentityProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createEntitlement', () => {
        it('invokes createEntitlement without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.CreateEntitlementRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createEntitlement = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createEntitlement(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createEntitlement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createEntitlement without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.CreateEntitlementRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createEntitlement = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createEntitlement(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createEntitlement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createEntitlement with call error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.CreateEntitlementRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createEntitlement = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createEntitlement(request), expectedError);
            assert((client.innerApiCalls.createEntitlement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createEntitlement with LRO error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.CreateEntitlementRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createEntitlement = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createEntitlement(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createEntitlement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateEntitlementProgress without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateEntitlementProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateEntitlementProgress with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateEntitlementProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('changeParameters', () => {
        it('invokes changeParameters without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ChangeParametersRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.changeParameters = stubLongRunningCall(expectedResponse);
            const [operation] = await client.changeParameters(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.changeParameters as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes changeParameters without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ChangeParametersRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.changeParameters = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.changeParameters(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.changeParameters as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes changeParameters with call error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ChangeParametersRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.changeParameters = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.changeParameters(request), expectedError);
            assert((client.innerApiCalls.changeParameters as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes changeParameters with LRO error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ChangeParametersRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.changeParameters = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.changeParameters(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.changeParameters as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkChangeParametersProgress without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkChangeParametersProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkChangeParametersProgress with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkChangeParametersProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('changeRenewalSettings', () => {
        it('invokes changeRenewalSettings without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ChangeRenewalSettingsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.changeRenewalSettings = stubLongRunningCall(expectedResponse);
            const [operation] = await client.changeRenewalSettings(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.changeRenewalSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes changeRenewalSettings without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ChangeRenewalSettingsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.changeRenewalSettings = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.changeRenewalSettings(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.changeRenewalSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes changeRenewalSettings with call error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ChangeRenewalSettingsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.changeRenewalSettings = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.changeRenewalSettings(request), expectedError);
            assert((client.innerApiCalls.changeRenewalSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes changeRenewalSettings with LRO error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ChangeRenewalSettingsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.changeRenewalSettings = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.changeRenewalSettings(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.changeRenewalSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkChangeRenewalSettingsProgress without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkChangeRenewalSettingsProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkChangeRenewalSettingsProgress with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkChangeRenewalSettingsProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('changeOffer', () => {
        it('invokes changeOffer without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ChangeOfferRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.changeOffer = stubLongRunningCall(expectedResponse);
            const [operation] = await client.changeOffer(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.changeOffer as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes changeOffer without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ChangeOfferRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.changeOffer = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.changeOffer(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.changeOffer as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes changeOffer with call error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ChangeOfferRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.changeOffer = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.changeOffer(request), expectedError);
            assert((client.innerApiCalls.changeOffer as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes changeOffer with LRO error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ChangeOfferRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.changeOffer = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.changeOffer(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.changeOffer as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkChangeOfferProgress without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkChangeOfferProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkChangeOfferProgress with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkChangeOfferProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('startPaidService', () => {
        it('invokes startPaidService without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.StartPaidServiceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.startPaidService = stubLongRunningCall(expectedResponse);
            const [operation] = await client.startPaidService(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.startPaidService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes startPaidService without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.StartPaidServiceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.startPaidService = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.startPaidService(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.startPaidService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes startPaidService with call error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.StartPaidServiceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.startPaidService = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.startPaidService(request), expectedError);
            assert((client.innerApiCalls.startPaidService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes startPaidService with LRO error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.StartPaidServiceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.startPaidService = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.startPaidService(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.startPaidService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkStartPaidServiceProgress without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkStartPaidServiceProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkStartPaidServiceProgress with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkStartPaidServiceProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('suspendEntitlement', () => {
        it('invokes suspendEntitlement without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.SuspendEntitlementRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.suspendEntitlement = stubLongRunningCall(expectedResponse);
            const [operation] = await client.suspendEntitlement(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.suspendEntitlement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes suspendEntitlement without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.SuspendEntitlementRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.suspendEntitlement = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.suspendEntitlement(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.suspendEntitlement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes suspendEntitlement with call error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.SuspendEntitlementRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.suspendEntitlement = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.suspendEntitlement(request), expectedError);
            assert((client.innerApiCalls.suspendEntitlement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes suspendEntitlement with LRO error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.SuspendEntitlementRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.suspendEntitlement = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.suspendEntitlement(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.suspendEntitlement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkSuspendEntitlementProgress without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkSuspendEntitlementProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkSuspendEntitlementProgress with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkSuspendEntitlementProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('cancelEntitlement', () => {
        it('invokes cancelEntitlement without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.CancelEntitlementRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.cancelEntitlement = stubLongRunningCall(expectedResponse);
            const [operation] = await client.cancelEntitlement(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.cancelEntitlement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes cancelEntitlement without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.CancelEntitlementRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.cancelEntitlement = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.cancelEntitlement(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.channel.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.channel.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.cancelEntitlement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes cancelEntitlement with call error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.CancelEntitlementRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.cancelEntitlement = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.cancelEntitlement(request), expectedError);
            assert((client.innerApiCalls.cancelEntitlement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes cancelEntitlement with LRO error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.CancelEntitlementRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.cancelEntitlement = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.cancelEntitlement(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.cancelEntitlement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCancelEntitlementProgress without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCancelEntitlementProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCancelEntitlementProgress with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCancelEntitlementProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('activateEntitlement', () => {
        it('invokes activateEntitlement without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ActivateEntitlementRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.activateEntitlement = stubLongRunningCall(expectedResponse);
            const [operation] = await client.activateEntitlement(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.activateEntitlement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes activateEntitlement without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ActivateEntitlementRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.activateEntitlement = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.activateEntitlement(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.channel.v1.IEntitlement, protos.google.cloud.channel.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.activateEntitlement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes activateEntitlement with call error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ActivateEntitlementRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.activateEntitlement = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.activateEntitlement(request), expectedError);
            assert((client.innerApiCalls.activateEntitlement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes activateEntitlement with LRO error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ActivateEntitlementRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.activateEntitlement = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.activateEntitlement(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.activateEntitlement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkActivateEntitlementProgress without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkActivateEntitlementProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkActivateEntitlementProgress with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkActivateEntitlementProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('transferEntitlements', () => {
        it('invokes transferEntitlements without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.TransferEntitlementsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.transferEntitlements = stubLongRunningCall(expectedResponse);
            const [operation] = await client.transferEntitlements(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.transferEntitlements as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes transferEntitlements without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.TransferEntitlementsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.transferEntitlements = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.transferEntitlements(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.channel.v1.ITransferEntitlementsResponse, protos.google.cloud.channel.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.channel.v1.ITransferEntitlementsResponse, protos.google.cloud.channel.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.transferEntitlements as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes transferEntitlements with call error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.TransferEntitlementsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.transferEntitlements = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.transferEntitlements(request), expectedError);
            assert((client.innerApiCalls.transferEntitlements as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes transferEntitlements with LRO error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.TransferEntitlementsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.transferEntitlements = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.transferEntitlements(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.transferEntitlements as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkTransferEntitlementsProgress without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkTransferEntitlementsProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkTransferEntitlementsProgress with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkTransferEntitlementsProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('transferEntitlementsToGoogle', () => {
        it('invokes transferEntitlementsToGoogle without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.TransferEntitlementsToGoogleRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.transferEntitlementsToGoogle = stubLongRunningCall(expectedResponse);
            const [operation] = await client.transferEntitlementsToGoogle(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.transferEntitlementsToGoogle as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes transferEntitlementsToGoogle without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.TransferEntitlementsToGoogleRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.transferEntitlementsToGoogle = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.transferEntitlementsToGoogle(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.channel.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.channel.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.transferEntitlementsToGoogle as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes transferEntitlementsToGoogle with call error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.TransferEntitlementsToGoogleRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.transferEntitlementsToGoogle = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.transferEntitlementsToGoogle(request), expectedError);
            assert((client.innerApiCalls.transferEntitlementsToGoogle as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes transferEntitlementsToGoogle with LRO error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.TransferEntitlementsToGoogleRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.transferEntitlementsToGoogle = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.transferEntitlementsToGoogle(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.transferEntitlementsToGoogle as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkTransferEntitlementsToGoogleProgress without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkTransferEntitlementsToGoogleProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkTransferEntitlementsToGoogleProgress with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkTransferEntitlementsToGoogleProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listCustomers', () => {
        it('invokes listCustomers without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListCustomersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
            ];
            client.innerApiCalls.listCustomers = stubSimpleCall(expectedResponse);
            const [response] = await client.listCustomers(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listCustomers as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listCustomers without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListCustomersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
            ];
            client.innerApiCalls.listCustomers = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listCustomers(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.channel.v1.ICustomer[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listCustomers as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listCustomers with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListCustomersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listCustomers = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listCustomers(request), expectedError);
            assert((client.innerApiCalls.listCustomers as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listCustomersStream without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListCustomersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
            ];
            client.descriptors.page.listCustomers.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listCustomersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.channel.v1.Customer[] = [];
                stream.on('data', (response: protos.google.cloud.channel.v1.Customer) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listCustomers.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCustomers, request));
            assert.strictEqual(
                (client.descriptors.page.listCustomers.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listCustomersStream with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListCustomersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listCustomers.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listCustomersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.channel.v1.Customer[] = [];
                stream.on('data', (response: protos.google.cloud.channel.v1.Customer) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listCustomers.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCustomers, request));
            assert.strictEqual(
                (client.descriptors.page.listCustomers.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listCustomers without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListCustomersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Customer()),
            ];
            client.descriptors.page.listCustomers.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.channel.v1.ICustomer[] = [];
            const iterable = client.listCustomersAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listCustomers.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listCustomers.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listCustomers with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListCustomersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listCustomers.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listCustomersAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.channel.v1.ICustomer[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listCustomers.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listCustomers.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listEntitlements', () => {
        it('invokes listEntitlements without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListEntitlementsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
            ];
            client.innerApiCalls.listEntitlements = stubSimpleCall(expectedResponse);
            const [response] = await client.listEntitlements(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listEntitlements as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listEntitlements without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListEntitlementsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
            ];
            client.innerApiCalls.listEntitlements = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listEntitlements(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.channel.v1.IEntitlement[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listEntitlements as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listEntitlements with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListEntitlementsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listEntitlements = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listEntitlements(request), expectedError);
            assert((client.innerApiCalls.listEntitlements as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listEntitlementsStream without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListEntitlementsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
            ];
            client.descriptors.page.listEntitlements.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listEntitlementsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.channel.v1.Entitlement[] = [];
                stream.on('data', (response: protos.google.cloud.channel.v1.Entitlement) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listEntitlements.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listEntitlements, request));
            assert.strictEqual(
                (client.descriptors.page.listEntitlements.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listEntitlementsStream with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListEntitlementsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listEntitlements.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listEntitlementsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.channel.v1.Entitlement[] = [];
                stream.on('data', (response: protos.google.cloud.channel.v1.Entitlement) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listEntitlements.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listEntitlements, request));
            assert.strictEqual(
                (client.descriptors.page.listEntitlements.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listEntitlements without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListEntitlementsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Entitlement()),
            ];
            client.descriptors.page.listEntitlements.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.channel.v1.IEntitlement[] = [];
            const iterable = client.listEntitlementsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listEntitlements.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listEntitlements.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listEntitlements with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListEntitlementsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listEntitlements.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listEntitlementsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.channel.v1.IEntitlement[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listEntitlements.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listEntitlements.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listTransferableSkus', () => {
        it('invokes listTransferableSkus without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListTransferableSkusRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableSku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableSku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableSku()),
            ];
            client.innerApiCalls.listTransferableSkus = stubSimpleCall(expectedResponse);
            const [response] = await client.listTransferableSkus(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTransferableSkus as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTransferableSkus without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListTransferableSkusRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableSku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableSku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableSku()),
            ];
            client.innerApiCalls.listTransferableSkus = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listTransferableSkus(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.channel.v1.ITransferableSku[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTransferableSkus as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listTransferableSkus with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListTransferableSkusRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listTransferableSkus = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listTransferableSkus(request), expectedError);
            assert((client.innerApiCalls.listTransferableSkus as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTransferableSkusStream without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListTransferableSkusRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableSku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableSku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableSku()),
            ];
            client.descriptors.page.listTransferableSkus.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listTransferableSkusStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.channel.v1.TransferableSku[] = [];
                stream.on('data', (response: protos.google.cloud.channel.v1.TransferableSku) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listTransferableSkus.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTransferableSkus, request));
            assert.strictEqual(
                (client.descriptors.page.listTransferableSkus.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listTransferableSkusStream with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListTransferableSkusRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listTransferableSkus.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listTransferableSkusStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.channel.v1.TransferableSku[] = [];
                stream.on('data', (response: protos.google.cloud.channel.v1.TransferableSku) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listTransferableSkus.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTransferableSkus, request));
            assert.strictEqual(
                (client.descriptors.page.listTransferableSkus.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listTransferableSkus without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListTransferableSkusRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableSku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableSku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableSku()),
            ];
            client.descriptors.page.listTransferableSkus.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.channel.v1.ITransferableSku[] = [];
            const iterable = client.listTransferableSkusAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listTransferableSkus.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listTransferableSkus.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listTransferableSkus with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListTransferableSkusRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listTransferableSkus.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listTransferableSkusAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.channel.v1.ITransferableSku[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listTransferableSkus.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listTransferableSkus.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listTransferableOffers', () => {
        it('invokes listTransferableOffers without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListTransferableOffersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableOffer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableOffer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableOffer()),
            ];
            client.innerApiCalls.listTransferableOffers = stubSimpleCall(expectedResponse);
            const [response] = await client.listTransferableOffers(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTransferableOffers as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTransferableOffers without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListTransferableOffersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableOffer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableOffer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableOffer()),
            ];
            client.innerApiCalls.listTransferableOffers = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listTransferableOffers(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.channel.v1.ITransferableOffer[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTransferableOffers as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listTransferableOffers with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListTransferableOffersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listTransferableOffers = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listTransferableOffers(request), expectedError);
            assert((client.innerApiCalls.listTransferableOffers as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTransferableOffersStream without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListTransferableOffersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableOffer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableOffer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableOffer()),
            ];
            client.descriptors.page.listTransferableOffers.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listTransferableOffersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.channel.v1.TransferableOffer[] = [];
                stream.on('data', (response: protos.google.cloud.channel.v1.TransferableOffer) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listTransferableOffers.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTransferableOffers, request));
            assert.strictEqual(
                (client.descriptors.page.listTransferableOffers.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listTransferableOffersStream with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListTransferableOffersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listTransferableOffers.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listTransferableOffersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.channel.v1.TransferableOffer[] = [];
                stream.on('data', (response: protos.google.cloud.channel.v1.TransferableOffer) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listTransferableOffers.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTransferableOffers, request));
            assert.strictEqual(
                (client.descriptors.page.listTransferableOffers.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listTransferableOffers without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListTransferableOffersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableOffer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableOffer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.TransferableOffer()),
            ];
            client.descriptors.page.listTransferableOffers.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.channel.v1.ITransferableOffer[] = [];
            const iterable = client.listTransferableOffersAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listTransferableOffers.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listTransferableOffers.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listTransferableOffers with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListTransferableOffersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listTransferableOffers.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listTransferableOffersAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.channel.v1.ITransferableOffer[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listTransferableOffers.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listTransferableOffers.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listChannelPartnerLinks', () => {
        it('invokes listChannelPartnerLinks without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListChannelPartnerLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.ChannelPartnerLink()),
              generateSampleMessage(new protos.google.cloud.channel.v1.ChannelPartnerLink()),
              generateSampleMessage(new protos.google.cloud.channel.v1.ChannelPartnerLink()),
            ];
            client.innerApiCalls.listChannelPartnerLinks = stubSimpleCall(expectedResponse);
            const [response] = await client.listChannelPartnerLinks(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listChannelPartnerLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listChannelPartnerLinks without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListChannelPartnerLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.ChannelPartnerLink()),
              generateSampleMessage(new protos.google.cloud.channel.v1.ChannelPartnerLink()),
              generateSampleMessage(new protos.google.cloud.channel.v1.ChannelPartnerLink()),
            ];
            client.innerApiCalls.listChannelPartnerLinks = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listChannelPartnerLinks(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.channel.v1.IChannelPartnerLink[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listChannelPartnerLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listChannelPartnerLinks with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListChannelPartnerLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listChannelPartnerLinks = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listChannelPartnerLinks(request), expectedError);
            assert((client.innerApiCalls.listChannelPartnerLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listChannelPartnerLinksStream without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListChannelPartnerLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.ChannelPartnerLink()),
              generateSampleMessage(new protos.google.cloud.channel.v1.ChannelPartnerLink()),
              generateSampleMessage(new protos.google.cloud.channel.v1.ChannelPartnerLink()),
            ];
            client.descriptors.page.listChannelPartnerLinks.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listChannelPartnerLinksStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.channel.v1.ChannelPartnerLink[] = [];
                stream.on('data', (response: protos.google.cloud.channel.v1.ChannelPartnerLink) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listChannelPartnerLinks.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listChannelPartnerLinks, request));
            assert.strictEqual(
                (client.descriptors.page.listChannelPartnerLinks.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listChannelPartnerLinksStream with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListChannelPartnerLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listChannelPartnerLinks.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listChannelPartnerLinksStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.channel.v1.ChannelPartnerLink[] = [];
                stream.on('data', (response: protos.google.cloud.channel.v1.ChannelPartnerLink) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listChannelPartnerLinks.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listChannelPartnerLinks, request));
            assert.strictEqual(
                (client.descriptors.page.listChannelPartnerLinks.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listChannelPartnerLinks without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListChannelPartnerLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.ChannelPartnerLink()),
              generateSampleMessage(new protos.google.cloud.channel.v1.ChannelPartnerLink()),
              generateSampleMessage(new protos.google.cloud.channel.v1.ChannelPartnerLink()),
            ];
            client.descriptors.page.listChannelPartnerLinks.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.channel.v1.IChannelPartnerLink[] = [];
            const iterable = client.listChannelPartnerLinksAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listChannelPartnerLinks.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listChannelPartnerLinks.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listChannelPartnerLinks with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListChannelPartnerLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listChannelPartnerLinks.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listChannelPartnerLinksAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.channel.v1.IChannelPartnerLink[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listChannelPartnerLinks.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listChannelPartnerLinks.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listProducts', () => {
        it('invokes listProducts without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListProductsRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
            ];
            client.innerApiCalls.listProducts = stubSimpleCall(expectedResponse);
            const [response] = await client.listProducts(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listProducts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listProducts without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListProductsRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
            ];
            client.innerApiCalls.listProducts = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listProducts(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.channel.v1.IProduct[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listProducts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listProducts with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListProductsRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.listProducts = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listProducts(request), expectedError);
            assert((client.innerApiCalls.listProducts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listProductsStream without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListProductsRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
            ];
            client.descriptors.page.listProducts.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listProductsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.channel.v1.Product[] = [];
                stream.on('data', (response: protos.google.cloud.channel.v1.Product) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listProducts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listProducts, request));
        });

        it('invokes listProductsStream with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListProductsRequest());
            const expectedError = new Error('expected');
            client.descriptors.page.listProducts.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listProductsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.channel.v1.Product[] = [];
                stream.on('data', (response: protos.google.cloud.channel.v1.Product) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listProducts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listProducts, request));
        });

        it('uses async iteration with listProducts without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListProductsRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Product()),
            ];
            client.descriptors.page.listProducts.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.channel.v1.IProduct[] = [];
            const iterable = client.listProductsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listProducts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });

        it('uses async iteration with listProducts with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListProductsRequest());const expectedError = new Error('expected');
            client.descriptors.page.listProducts.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listProductsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.channel.v1.IProduct[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listProducts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('listSkus', () => {
        it('invokes listSkus without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListSkusRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
            ];
            client.innerApiCalls.listSkus = stubSimpleCall(expectedResponse);
            const [response] = await client.listSkus(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listSkus as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listSkus without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListSkusRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
            ];
            client.innerApiCalls.listSkus = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listSkus(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.channel.v1.ISku[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listSkus as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listSkus with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListSkusRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listSkus = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listSkus(request), expectedError);
            assert((client.innerApiCalls.listSkus as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listSkusStream without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListSkusRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
            ];
            client.descriptors.page.listSkus.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listSkusStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.channel.v1.Sku[] = [];
                stream.on('data', (response: protos.google.cloud.channel.v1.Sku) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listSkus.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listSkus, request));
            assert.strictEqual(
                (client.descriptors.page.listSkus.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listSkusStream with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListSkusRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listSkus.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listSkusStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.channel.v1.Sku[] = [];
                stream.on('data', (response: protos.google.cloud.channel.v1.Sku) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listSkus.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listSkus, request));
            assert.strictEqual(
                (client.descriptors.page.listSkus.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listSkus without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListSkusRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Sku()),
            ];
            client.descriptors.page.listSkus.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.channel.v1.ISku[] = [];
            const iterable = client.listSkusAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listSkus.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listSkus.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listSkus with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListSkusRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listSkus.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listSkusAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.channel.v1.ISku[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listSkus.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listSkus.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listOffers', () => {
        it('invokes listOffers without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListOffersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
            ];
            client.innerApiCalls.listOffers = stubSimpleCall(expectedResponse);
            const [response] = await client.listOffers(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listOffers as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listOffers without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListOffersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
            ];
            client.innerApiCalls.listOffers = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listOffers(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.channel.v1.IOffer[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listOffers as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listOffers with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListOffersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listOffers = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listOffers(request), expectedError);
            assert((client.innerApiCalls.listOffers as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listOffersStream without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListOffersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
            ];
            client.descriptors.page.listOffers.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listOffersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.channel.v1.Offer[] = [];
                stream.on('data', (response: protos.google.cloud.channel.v1.Offer) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listOffers.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listOffers, request));
            assert.strictEqual(
                (client.descriptors.page.listOffers.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listOffersStream with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListOffersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listOffers.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listOffersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.channel.v1.Offer[] = [];
                stream.on('data', (response: protos.google.cloud.channel.v1.Offer) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listOffers.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listOffers, request));
            assert.strictEqual(
                (client.descriptors.page.listOffers.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listOffers without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListOffersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.Offer()),
            ];
            client.descriptors.page.listOffers.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.channel.v1.IOffer[] = [];
            const iterable = client.listOffersAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listOffers.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listOffers.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listOffers with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListOffersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listOffers.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listOffersAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.channel.v1.IOffer[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listOffers.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listOffers.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listPurchasableSkus', () => {
        it('invokes listPurchasableSkus without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListPurchasableSkusRequest());
            request.customer = '';
            const expectedHeaderRequestParams = "customer=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableSku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableSku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableSku()),
            ];
            client.innerApiCalls.listPurchasableSkus = stubSimpleCall(expectedResponse);
            const [response] = await client.listPurchasableSkus(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listPurchasableSkus as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listPurchasableSkus without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListPurchasableSkusRequest());
            request.customer = '';
            const expectedHeaderRequestParams = "customer=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableSku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableSku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableSku()),
            ];
            client.innerApiCalls.listPurchasableSkus = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listPurchasableSkus(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.channel.v1.IPurchasableSku[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listPurchasableSkus as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listPurchasableSkus with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListPurchasableSkusRequest());
            request.customer = '';
            const expectedHeaderRequestParams = "customer=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listPurchasableSkus = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listPurchasableSkus(request), expectedError);
            assert((client.innerApiCalls.listPurchasableSkus as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listPurchasableSkusStream without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListPurchasableSkusRequest());
            request.customer = '';
            const expectedHeaderRequestParams = "customer=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableSku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableSku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableSku()),
            ];
            client.descriptors.page.listPurchasableSkus.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listPurchasableSkusStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.channel.v1.PurchasableSku[] = [];
                stream.on('data', (response: protos.google.cloud.channel.v1.PurchasableSku) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listPurchasableSkus.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listPurchasableSkus, request));
            assert.strictEqual(
                (client.descriptors.page.listPurchasableSkus.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listPurchasableSkusStream with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListPurchasableSkusRequest());
            request.customer = '';
            const expectedHeaderRequestParams = "customer=";
            const expectedError = new Error('expected');
            client.descriptors.page.listPurchasableSkus.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listPurchasableSkusStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.channel.v1.PurchasableSku[] = [];
                stream.on('data', (response: protos.google.cloud.channel.v1.PurchasableSku) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listPurchasableSkus.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listPurchasableSkus, request));
            assert.strictEqual(
                (client.descriptors.page.listPurchasableSkus.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listPurchasableSkus without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListPurchasableSkusRequest());
            request.customer = '';
            const expectedHeaderRequestParams = "customer=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableSku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableSku()),
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableSku()),
            ];
            client.descriptors.page.listPurchasableSkus.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.channel.v1.IPurchasableSku[] = [];
            const iterable = client.listPurchasableSkusAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listPurchasableSkus.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listPurchasableSkus.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listPurchasableSkus with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListPurchasableSkusRequest());
            request.customer = '';
            const expectedHeaderRequestParams = "customer=";const expectedError = new Error('expected');
            client.descriptors.page.listPurchasableSkus.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listPurchasableSkusAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.channel.v1.IPurchasableSku[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listPurchasableSkus.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listPurchasableSkus.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listPurchasableOffers', () => {
        it('invokes listPurchasableOffers without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListPurchasableOffersRequest());
            request.customer = '';
            const expectedHeaderRequestParams = "customer=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableOffer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableOffer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableOffer()),
            ];
            client.innerApiCalls.listPurchasableOffers = stubSimpleCall(expectedResponse);
            const [response] = await client.listPurchasableOffers(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listPurchasableOffers as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listPurchasableOffers without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListPurchasableOffersRequest());
            request.customer = '';
            const expectedHeaderRequestParams = "customer=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableOffer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableOffer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableOffer()),
            ];
            client.innerApiCalls.listPurchasableOffers = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listPurchasableOffers(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.channel.v1.IPurchasableOffer[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listPurchasableOffers as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listPurchasableOffers with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListPurchasableOffersRequest());
            request.customer = '';
            const expectedHeaderRequestParams = "customer=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listPurchasableOffers = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listPurchasableOffers(request), expectedError);
            assert((client.innerApiCalls.listPurchasableOffers as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listPurchasableOffersStream without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListPurchasableOffersRequest());
            request.customer = '';
            const expectedHeaderRequestParams = "customer=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableOffer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableOffer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableOffer()),
            ];
            client.descriptors.page.listPurchasableOffers.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listPurchasableOffersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.channel.v1.PurchasableOffer[] = [];
                stream.on('data', (response: protos.google.cloud.channel.v1.PurchasableOffer) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listPurchasableOffers.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listPurchasableOffers, request));
            assert.strictEqual(
                (client.descriptors.page.listPurchasableOffers.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listPurchasableOffersStream with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListPurchasableOffersRequest());
            request.customer = '';
            const expectedHeaderRequestParams = "customer=";
            const expectedError = new Error('expected');
            client.descriptors.page.listPurchasableOffers.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listPurchasableOffersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.channel.v1.PurchasableOffer[] = [];
                stream.on('data', (response: protos.google.cloud.channel.v1.PurchasableOffer) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listPurchasableOffers.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listPurchasableOffers, request));
            assert.strictEqual(
                (client.descriptors.page.listPurchasableOffers.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listPurchasableOffers without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListPurchasableOffersRequest());
            request.customer = '';
            const expectedHeaderRequestParams = "customer=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableOffer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableOffer()),
              generateSampleMessage(new protos.google.cloud.channel.v1.PurchasableOffer()),
            ];
            client.descriptors.page.listPurchasableOffers.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.channel.v1.IPurchasableOffer[] = [];
            const iterable = client.listPurchasableOffersAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listPurchasableOffers.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listPurchasableOffers.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listPurchasableOffers with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListPurchasableOffersRequest());
            request.customer = '';
            const expectedHeaderRequestParams = "customer=";const expectedError = new Error('expected');
            client.descriptors.page.listPurchasableOffers.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listPurchasableOffersAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.channel.v1.IPurchasableOffer[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listPurchasableOffers.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listPurchasableOffers.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listSubscribers', () => {
        it('invokes listSubscribers without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListSubscribersRequest());
            request.account = '';
            const expectedHeaderRequestParams = "account=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [new String(), new String(), new String()];
            client.innerApiCalls.listSubscribers = stubSimpleCall(expectedResponse);
            const [response] = await client.listSubscribers(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listSubscribers as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listSubscribers without error using callback', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListSubscribersRequest());
            request.account = '';
            const expectedHeaderRequestParams = "account=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [new String(), new String(), new String()];
            client.innerApiCalls.listSubscribers = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listSubscribers(
                    request,
                    (err?: Error|null, result?: string[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listSubscribers as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listSubscribers with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListSubscribersRequest());
            request.account = '';
            const expectedHeaderRequestParams = "account=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listSubscribers = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listSubscribers(request), expectedError);
            assert((client.innerApiCalls.listSubscribers as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listSubscribersStream without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListSubscribersRequest());
            request.account = '';
            const expectedHeaderRequestParams = "account=";
            const expectedResponse = [new String(), new String(), new String()];
            client.descriptors.page.listSubscribers.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listSubscribersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: string[] = [];
                stream.on('data', (response: string) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listSubscribers.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listSubscribers, request));
            assert.strictEqual(
                (client.descriptors.page.listSubscribers.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listSubscribersStream with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListSubscribersRequest());
            request.account = '';
            const expectedHeaderRequestParams = "account=";
            const expectedError = new Error('expected');
            client.descriptors.page.listSubscribers.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listSubscribersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: string[] = [];
                stream.on('data', (response: string) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listSubscribers.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listSubscribers, request));
            assert.strictEqual(
                (client.descriptors.page.listSubscribers.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listSubscribers without error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListSubscribersRequest());
            request.account = '';
            const expectedHeaderRequestParams = "account=";
            const expectedResponse = [new String(), new String(), new String()];
            client.descriptors.page.listSubscribers.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: string[] = [];
            const iterable = client.listSubscribersAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listSubscribers.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listSubscribers.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listSubscribers with error', async () => {
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.channel.v1.ListSubscribersRequest());
            request.account = '';
            const expectedHeaderRequestParams = "account=";const expectedError = new Error('expected');
            client.descriptors.page.listSubscribers.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listSubscribersAsync(request);
            await assert.rejects(async () => {
                const responses: string[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listSubscribers.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listSubscribers.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('customer', () => {
            const fakePath = "/rendered/path/customer";
            const expectedParameters = {
                account: "accountValue",
                customer: "customerValue",
            };
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerPath', () => {
                const result = client.customerPath("accountValue", "customerValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchAccountFromCustomerName', () => {
                const result = client.matchAccountFromCustomerName(fakePath);
                assert.strictEqual(result, "accountValue");
                assert((client.pathTemplates.customerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomerFromCustomerName', () => {
                const result = client.matchCustomerFromCustomerName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.customerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('entitlement', () => {
            const fakePath = "/rendered/path/entitlement";
            const expectedParameters = {
                account: "accountValue",
                customer: "customerValue",
                entitlement: "entitlementValue",
            };
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.entitlementPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.entitlementPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('entitlementPath', () => {
                const result = client.entitlementPath("accountValue", "customerValue", "entitlementValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.entitlementPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchAccountFromEntitlementName', () => {
                const result = client.matchAccountFromEntitlementName(fakePath);
                assert.strictEqual(result, "accountValue");
                assert((client.pathTemplates.entitlementPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomerFromEntitlementName', () => {
                const result = client.matchCustomerFromEntitlementName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.entitlementPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchEntitlementFromEntitlementName', () => {
                const result = client.matchEntitlementFromEntitlementName(fakePath);
                assert.strictEqual(result, "entitlementValue");
                assert((client.pathTemplates.entitlementPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('offer', () => {
            const fakePath = "/rendered/path/offer";
            const expectedParameters = {
                account: "accountValue",
                offer: "offerValue",
            };
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.offerPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.offerPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('offerPath', () => {
                const result = client.offerPath("accountValue", "offerValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.offerPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchAccountFromOfferName', () => {
                const result = client.matchAccountFromOfferName(fakePath);
                assert.strictEqual(result, "accountValue");
                assert((client.pathTemplates.offerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchOfferFromOfferName', () => {
                const result = client.matchOfferFromOfferName(fakePath);
                assert.strictEqual(result, "offerValue");
                assert((client.pathTemplates.offerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('product', () => {
            const fakePath = "/rendered/path/product";
            const expectedParameters = {
                product: "productValue",
            };
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.productPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.productPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('productPath', () => {
                const result = client.productPath("productValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.productPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProductFromProductName', () => {
                const result = client.matchProductFromProductName(fakePath);
                assert.strictEqual(result, "productValue");
                assert((client.pathTemplates.productPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('sku', () => {
            const fakePath = "/rendered/path/sku";
            const expectedParameters = {
                product: "productValue",
                sku: "skuValue",
            };
            const client = new cloudchannelserviceModule.v1.CloudChannelServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.skuPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.skuPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('skuPath', () => {
                const result = client.skuPath("productValue", "skuValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.skuPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProductFromSkuName', () => {
                const result = client.matchProductFromSkuName(fakePath);
                assert.strictEqual(result, "productValue");
                assert((client.pathTemplates.skuPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSkuFromSkuName', () => {
                const result = client.matchSkuFromSkuName(fakePath);
                assert.strictEqual(result, "skuValue");
                assert((client.pathTemplates.skuPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
